
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000331c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  00800060  0000331c  000033b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080014c  0080014c  0000349c  2**0
                  ALLOC
  3 .stab         000033b4  00000000  00000000  0000349c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001328  00000000  00000000  00006850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b70c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000baf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c2c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b6 06 	jmp	0xd6c	; 0xd6c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 35       	cpi	r26, 0x56	; 86
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <main>
      8a:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e3       	ldi	r26, 0x36	; 54
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e3       	ldi	r24, 0x36	; 54
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_configType *Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 * USBS    = based on the settings it will set the No. Stop bits
	 * UCSZ1:0 = based on the settings it will set the Data Bit Mode & UCSZ2 in UCSRB register
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	/* Selecting the no. of Stop Bits & Setting URSEL bit */
	UCSRC = (1<<URSEL);
     b6a:	e0 e4       	ldi	r30, 0x40	; 64
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 e8       	ldi	r24, 0x80	; 128
     b70:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
     b72:	a0 e4       	ldi	r26, 0x40	; 64
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	e0 e4       	ldi	r30, 0x40	; 64
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	28 2f       	mov	r18, r24
     b7e:	29 7f       	andi	r18, 0xF9	; 249
     b80:	eb 81       	ldd	r30, Y+3	; 0x03
     b82:	fc 81       	ldd	r31, Y+4	; 0x04
     b84:	80 81       	ld	r24, Z
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	82 2b       	or	r24, r18
     b90:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bits)<<3);
     b92:	a0 e4       	ldi	r26, 0x40	; 64
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e0 e4       	ldi	r30, 0x40	; 64
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	28 2f       	mov	r18, r24
     b9e:	27 7f       	andi	r18, 0xF7	; 247
     ba0:	eb 81       	ldd	r30, Y+3	; 0x03
     ba2:	fc 81       	ldd	r31, Y+4	; 0x04
     ba4:	82 81       	ldd	r24, Z+2	; 0x02
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	82 2b       	or	r24, r18
     bb8:	8c 93       	st	X, r24

	/* Selecting The Parity Mode */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
     bba:	a0 e4       	ldi	r26, 0x40	; 64
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	28 2f       	mov	r18, r24
     bc6:	2f 7c       	andi	r18, 0xCF	; 207
     bc8:	eb 81       	ldd	r30, Y+3	; 0x03
     bca:	fc 81       	ldd	r31, Y+4	; 0x04
     bcc:	81 81       	ldd	r24, Z+1	; 0x01
     bce:	88 2f       	mov	r24, r24
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	82 95       	swap	r24
     bd4:	92 95       	swap	r25
     bd6:	90 7f       	andi	r25, 0xF0	; 240
     bd8:	98 27       	eor	r25, r24
     bda:	80 7f       	andi	r24, 0xF0	; 240
     bdc:	98 27       	eor	r25, r24
     bde:	82 2b       	or	r24, r18
     be0:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSZ2);
		break;
	} */

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
     be2:	eb 81       	ldd	r30, Y+3	; 0x03
     be4:	fc 81       	ldd	r31, Y+4	; 0x04
     be6:	83 81       	ldd	r24, Z+3	; 0x03
     be8:	94 81       	ldd	r25, Z+4	; 0x04
     bea:	a5 81       	ldd	r26, Z+5	; 0x05
     bec:	b6 81       	ldd	r27, Z+6	; 0x06
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	aa 1f       	adc	r26, r26
     bf4:	bb 1f       	adc	r27, r27
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	aa 1f       	adc	r26, r26
     bfc:	bb 1f       	adc	r27, r27
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	aa 1f       	adc	r26, r26
     c04:	bb 1f       	adc	r27, r27
     c06:	9c 01       	movw	r18, r24
     c08:	ad 01       	movw	r20, r26
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	92 e1       	ldi	r25, 0x12	; 18
     c0e:	aa e7       	ldi	r26, 0x7A	; 122
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__udivmodsi4>
     c1a:	da 01       	movw	r26, r20
     c1c:	c9 01       	movw	r24, r18
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9a 83       	std	Y+2, r25	; 0x02
     c22:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
     c24:	e0 e4       	ldi	r30, 0x40	; 64
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	89 2f       	mov	r24, r25
     c2e:	99 27       	eor	r25, r25
     c30:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c32:	e9 e2       	ldi	r30, 0x29	; 41
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	80 83       	st	Z, r24
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	cf 91       	pop	r28
     c44:	df 91       	pop	r29
     c46:	08 95       	ret

00000c48 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	0f 92       	push	r0
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c54:	eb e2       	ldi	r30, 0x2B	; 43
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	80 72       	andi	r24, 0x20	; 32
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	b9 f3       	breq	.-18     	; 0xc54 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c66:	ec e2       	ldi	r30, 0x2C	; 44
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c6e:	0f 90       	pop	r0
     c70:	cf 91       	pop	r28
     c72:	df 91       	pop	r29
     c74:	08 95       	ret

00000c76 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c7e:	eb e2       	ldi	r30, 0x2B	; 43
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	88 23       	and	r24, r24
     c86:	dc f7       	brge	.-10     	; 0xc7e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
     c88:	ec e2       	ldi	r30, 0x2C	; 44
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	00 d0       	rcall	.+0      	; 0xc9a <UART_sendString+0x6>
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9b 83       	std	Y+3, r25	; 0x03
     ca2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ca4:	19 82       	std	Y+1, r1	; 0x01
     ca6:	0e c0       	rjmp	.+28     	; 0xcc4 <UART_sendString+0x30>
	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	9b 81       	ldd	r25, Y+3	; 0x03
     cb2:	fc 01       	movw	r30, r24
     cb4:	e2 0f       	add	r30, r18
     cb6:	f3 1f       	adc	r31, r19
     cb8:	80 81       	ld	r24, Z
     cba:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
		i++;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	/* Send the whole string */
	while(Str[i] != '\0')
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	9b 81       	ldd	r25, Y+3	; 0x03
     cce:	fc 01       	movw	r30, r24
     cd0:	e2 0f       	add	r30, r18
     cd2:	f3 1f       	adc	r31, r19
     cd4:	80 81       	ld	r24, Z
     cd6:	88 23       	and	r24, r24
     cd8:	39 f7       	brne	.-50     	; 0xca8 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <UART_receiveString+0xa>
     cf0:	0f 92       	push	r0
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
     cf6:	9b 83       	std	Y+3, r25	; 0x03
     cf8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cfa:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	9b 81       	ldd	r25, Y+3	; 0x03
     d06:	8c 01       	movw	r16, r24
     d08:	02 0f       	add	r16, r18
     d0a:	13 1f       	adc	r17, r19
     d0c:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
     d10:	f8 01       	movw	r30, r16
     d12:	80 83       	st	Z, r24
     d14:	0f c0       	rjmp	.+30     	; 0xd34 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	8f 5f       	subi	r24, 0xFF	; 255
     d1a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	8c 01       	movw	r16, r24
     d28:	02 0f       	add	r16, r18
     d2a:	13 1f       	adc	r17, r19
     d2c:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
     d30:	f8 01       	movw	r30, r16
     d32:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	9b 81       	ldd	r25, Y+3	; 0x03
     d3e:	fc 01       	movw	r30, r24
     d40:	e2 0f       	add	r30, r18
     d42:	f3 1f       	adc	r31, r19
     d44:	80 81       	ld	r24, Z
     d46:	83 32       	cpi	r24, 0x23	; 35
     d48:	31 f7       	brne	.-52     	; 0xd16 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	fc 01       	movw	r30, r24
     d56:	e2 0f       	add	r30, r18
     d58:	f3 1f       	adc	r31, r19
     d5a:	10 82       	st	Z, r1
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <__vector_7>:
*                                   ISRs                                       *
*******************************************************************************/
#ifdef COMPARE_MODE

ISR(TIMER1_COMPA_vect)
{
     d6c:	1f 92       	push	r1
     d6e:	0f 92       	push	r0
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	0f 92       	push	r0
     d74:	11 24       	eor	r1, r1
     d76:	2f 93       	push	r18
     d78:	3f 93       	push	r19
     d7a:	4f 93       	push	r20
     d7c:	5f 93       	push	r21
     d7e:	6f 93       	push	r22
     d80:	7f 93       	push	r23
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
     d86:	af 93       	push	r26
     d88:	bf 93       	push	r27
     d8a:	ef 93       	push	r30
     d8c:	ff 93       	push	r31
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     d96:	80 91 4c 01 	lds	r24, 0x014C
     d9a:	90 91 4d 01 	lds	r25, 0x014D
     d9e:	00 97       	sbiw	r24, 0x00	; 0
     da0:	29 f0       	breq	.+10     	; 0xdac <__vector_7+0x40>
		{
			/* call the function using pointer to function g_callBackPtr();*/
			(*g_callBackPtr)();
     da2:	e0 91 4c 01 	lds	r30, 0x014C
     da6:	f0 91 4d 01 	lds	r31, 0x014D
     daa:	09 95       	icall
		}
}
     dac:	cf 91       	pop	r28
     dae:	df 91       	pop	r29
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	7f 91       	pop	r23
     dbe:	6f 91       	pop	r22
     dc0:	5f 91       	pop	r21
     dc2:	4f 91       	pop	r20
     dc4:	3f 91       	pop	r19
     dc6:	2f 91       	pop	r18
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <TIMER1_init>:
/*******************************************************************************
*                       Functions Definitions                                  *
*******************************************************************************/

void TIMER1_init(const TIMER1_configType * Config_Ptr)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <TIMER1_init+0x6>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <TIMER1_init+0x8>
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
	/* setting FOC1A & FOC1B as we are in non-pwm mode */
    TCCR1A |= (1<<FOC1A) | (1<<FOC1B) ;
     de2:	af e4       	ldi	r26, 0x4F	; 79
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	ef e4       	ldi	r30, 0x4F	; 79
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8c 60       	ori	r24, 0x0C	; 12
     dee:	8c 93       	st	X, r24
    /* setting the timer mode
     * WGM10,WGM11 are always set to 0 as we are in non-pwm mode */
   // TCCR1B = (TCCR1B & 0xE7) | (Config_Ptr -> mode);

    /* another method */
    switch(Config_Ptr -> mode)
     df0:	e9 81       	ldd	r30, Y+1	; 0x01
     df2:	fa 81       	ldd	r31, Y+2	; 0x02
     df4:	85 81       	ldd	r24, Z+5	; 0x05
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	3c 83       	std	Y+4, r19	; 0x04
     dfc:	2b 83       	std	Y+3, r18	; 0x03
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	91 05       	cpc	r25, r1
     e06:	c1 f0       	breq	.+48     	; 0xe38 <TIMER1_init+0x66>
     e08:	2b 81       	ldd	r18, Y+3	; 0x03
     e0a:	3c 81       	ldd	r19, Y+4	; 0x04
     e0c:	23 30       	cpi	r18, 0x03	; 3
     e0e:	31 05       	cpc	r19, r1
     e10:	11 f1       	breq	.+68     	; 0xe56 <TIMER1_init+0x84>
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	9c 81       	ldd	r25, Y+4	; 0x04
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	61 f5       	brne	.+88     	; 0xe72 <TIMER1_init+0xa0>
    {

    case NORMAL:
    	CLEAR_BIT(TCCR1B,WGM12);
     e1a:	ae e4       	ldi	r26, 0x4E	; 78
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ee e4       	ldi	r30, 0x4E	; 78
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	87 7f       	andi	r24, 0xF7	; 247
     e26:	8c 93       	st	X, r24
    	CLEAR_BIT(TCCR1B,WGM13);
     e28:	ae e4       	ldi	r26, 0x4E	; 78
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	ee e4       	ldi	r30, 0x4E	; 78
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8f 7e       	andi	r24, 0xEF	; 239
     e34:	8c 93       	st	X, r24
     e36:	1d c0       	rjmp	.+58     	; 0xe72 <TIMER1_init+0xa0>
    	break;

#ifdef COMPARE_MODE                    // it will be used in compare mode only.

    case CTC_OCR1A_TOP:
    	SET_BIT(TCCR1B,WGM12);
     e38:	ae e4       	ldi	r26, 0x4E	; 78
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	ee e4       	ldi	r30, 0x4E	; 78
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	88 60       	ori	r24, 0x08	; 8
     e44:	8c 93       	st	X, r24
    	CLEAR_BIT(TCCR1B,WGM13);
     e46:	ae e4       	ldi	r26, 0x4E	; 78
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ee e4       	ldi	r30, 0x4E	; 78
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8f 7e       	andi	r24, 0xEF	; 239
     e52:	8c 93       	st	X, r24
     e54:	0e c0       	rjmp	.+28     	; 0xe72 <TIMER1_init+0xa0>
    	break;

    case CTC_ICR1_TOP:
    	SET_BIT(TCCR1B,WGM12);
     e56:	ae e4       	ldi	r26, 0x4E	; 78
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ee e4       	ldi	r30, 0x4E	; 78
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
    	SET_BIT(TCCR1B,WGM13);
     e64:	ae e4       	ldi	r26, 0x4E	; 78
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ee e4       	ldi	r30, 0x4E	; 78
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	8c 93       	st	X, r24
#endif

    }

	/* selecting prescaler */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr -> prescaler);
     e72:	ae e4       	ldi	r26, 0x4E	; 78
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ee e4       	ldi	r30, 0x4E	; 78
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	98 2f       	mov	r25, r24
     e7e:	98 7f       	andi	r25, 0xF8	; 248
     e80:	e9 81       	ldd	r30, Y+1	; 0x01
     e82:	fa 81       	ldd	r31, Y+2	; 0x02
     e84:	84 81       	ldd	r24, Z+4	; 0x04
     e86:	89 2b       	or	r24, r25
     e88:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,CS12);
		break;
	}*/

	/* setting initial value to the timer/counter with zero */
	TCNT1 = (Config_Ptr -> initial_value) ;
     e8a:	ac e4       	ldi	r26, 0x4C	; 76
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e9 81       	ldd	r30, Y+1	; 0x01
     e90:	fa 81       	ldd	r31, Y+2	; 0x02
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	9c 93       	st	X, r25
     e9a:	8e 93       	st	-X, r24


	/* it will be used in compare mode only. */
#ifdef COMPARE_MODE
	/* setting a compare match value in OCR1A = any value , when matching this value the timer will count 1 sec */
	OCR1A = (Config_Ptr -> compare_value);
     e9c:	aa e4       	ldi	r26, 0x4A	; 74
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e9 81       	ldd	r30, Y+1	; 0x01
     ea2:	fa 81       	ldd	r31, Y+2	; 0x02
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	9c 93       	st	X, r25
     eac:	8e 93       	st	-X, r24

	/* enabling OCR1A compare match interrupt */
    TIMSK |= (1<<OCIE1A);
     eae:	a9 e5       	ldi	r26, 0x59	; 89
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e9 e5       	ldi	r30, 0x59	; 89
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 61       	ori	r24, 0x10	; 16
     eba:	8c 93       	st	X, r24
#endif

    /* Enabling i-bit */
    SREG |= (1<<7);
     ebc:	af e5       	ldi	r26, 0x5F	; 95
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ef e5       	ldi	r30, 0x5F	; 95
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	8c 93       	st	X, r24
}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <TIMER1_deInit>:

void TIMER1_deInit(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
	/* clearing the timer registers */
	TCCR1A = 0;
     ee0:	ef e4       	ldi	r30, 0x4F	; 79
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	10 82       	st	Z, r1
	TCCR1B = 0;
     ee6:	ee e4       	ldi	r30, 0x4E	; 78
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	10 82       	st	Z, r1
	TCNT1 = 0;
     eec:	ec e4       	ldi	r30, 0x4C	; 76
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	11 82       	std	Z+1, r1	; 0x01
     ef2:	10 82       	st	Z, r1
	OCR1A = 0;
     ef4:	ea e4       	ldi	r30, 0x4A	; 74
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	11 82       	std	Z+1, r1	; 0x01
     efa:	10 82       	st	Z, r1

	/* disable OCR1A compare match interrupt */
	CLEAR_BIT(TIMSK,OCIE1A);
     efc:	a9 e5       	ldi	r26, 0x59	; 89
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e9 e5       	ldi	r30, 0x59	; 89
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8f 7e       	andi	r24, 0xEF	; 239
     f08:	8c 93       	st	X, r24

	/* disable overflow match interrupt */
	CLEAR_BIT(TIMSK,TOIE1);
     f0a:	a9 e5       	ldi	r26, 0x59	; 89
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e9 e5       	ldi	r30, 0x59	; 89
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8b 7f       	andi	r24, 0xFB	; 251
     f16:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
     f18:	10 92 4d 01 	sts	0x014D, r1
     f1c:	10 92 4c 01 	sts	0x014C, r1
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <TIMER1_setCallBack>:

void TIMER1_setCallBack(void(*a_ptr)(void))
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <TIMER1_setCallBack+0x6>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr ;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	90 93 4d 01 	sts	0x014D, r25
     f3c:	80 93 4c 01 	sts	0x014C, r24
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <GPIO_setupPinDirection+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <GPIO_setupPinDirection+0x8>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	6a 83       	std	Y+2, r22	; 0x02
     f5c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	88 30       	cpi	r24, 0x08	; 8
     f62:	08 f0       	brcs	.+2      	; 0xf66 <GPIO_setupPinDirection+0x1c>
     f64:	d5 c0       	rjmp	.+426    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <GPIO_setupPinDirection+0x24>
     f6c:	d1 c0       	rjmp	.+418    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3d 83       	std	Y+5, r19	; 0x05
     f76:	2c 83       	std	Y+4, r18	; 0x04
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <GPIO_setupPinDirection+0x3a>
     f82:	43 c0       	rjmp	.+134    	; 0x100a <GPIO_setupPinDirection+0xc0>
     f84:	2c 81       	ldd	r18, Y+4	; 0x04
     f86:	3d 81       	ldd	r19, Y+5	; 0x05
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <GPIO_setupPinDirection+0x4e>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	71 f0       	breq	.+28     	; 0xfb2 <GPIO_setupPinDirection+0x68>
     f96:	bc c0       	rjmp	.+376    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <GPIO_setupPinDirection+0x5a>
     fa2:	5f c0       	rjmp	.+190    	; 0x1062 <GPIO_setupPinDirection+0x118>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	91 05       	cpc	r25, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <GPIO_setupPinDirection+0x66>
     fae:	85 c0       	rjmp	.+266    	; 0x10ba <GPIO_setupPinDirection+0x170>
     fb0:	af c0       	rjmp	.+350    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	a1 f4       	brne	.+40     	; 0xfe0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     fb8:	aa e3       	ldi	r26, 0x3A	; 58
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ea e3       	ldi	r30, 0x3A	; 58
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <GPIO_setupPinDirection+0x8c>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <GPIO_setupPinDirection+0x88>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	98 c0       	rjmp	.+304    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     fe0:	aa e3       	ldi	r26, 0x3A	; 58
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ea e3       	ldi	r30, 0x3A	; 58
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_setupPinDirection+0xb4>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_setupPinDirection+0xb0>
    1002:	80 95       	com	r24
    1004:	84 23       	and	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	83 c0       	rjmp	.+262    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	a1 f4       	brne	.+40     	; 0x1038 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1010:	a7 e3       	ldi	r26, 0x37	; 55
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e7 e3       	ldi	r30, 0x37	; 55
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <GPIO_setupPinDirection+0xe4>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <GPIO_setupPinDirection+0xe0>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	6c c0       	rjmp	.+216    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1038:	a7 e3       	ldi	r26, 0x37	; 55
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e7 e3       	ldi	r30, 0x37	; 55
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <GPIO_setupPinDirection+0x10c>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <GPIO_setupPinDirection+0x108>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	57 c0       	rjmp	.+174    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	a1 f4       	brne	.+40     	; 0x1090 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1068:	a4 e3       	ldi	r26, 0x34	; 52
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e4 e3       	ldi	r30, 0x34	; 52
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_setupPinDirection+0x13c>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_setupPinDirection+0x138>
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	40 c0       	rjmp	.+128    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1090:	a4 e3       	ldi	r26, 0x34	; 52
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e4 e3       	ldi	r30, 0x34	; 52
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_setupPinDirection+0x164>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_setupPinDirection+0x160>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	2b c0       	rjmp	.+86     	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	a1 f4       	brne	.+40     	; 0x10e8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10c0:	a1 e3       	ldi	r26, 0x31	; 49
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e1 e3       	ldi	r30, 0x31	; 49
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_setupPinDirection+0x194>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_setupPinDirection+0x190>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	14 c0       	rjmp	.+40     	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10e8:	a1 e3       	ldi	r26, 0x31	; 49
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e1 e3       	ldi	r30, 0x31	; 49
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <GPIO_setupPinDirection+0x1bc>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <GPIO_setupPinDirection+0x1b8>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <GPIO_writePin+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <GPIO_writePin+0x8>
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	6a 83       	std	Y+2, r22	; 0x02
    1132:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	88 30       	cpi	r24, 0x08	; 8
    1138:	08 f0       	brcs	.+2      	; 0x113c <GPIO_writePin+0x1c>
    113a:	d5 c0       	rjmp	.+426    	; 0x12e6 <GPIO_writePin+0x1c6>
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	08 f0       	brcs	.+2      	; 0x1144 <GPIO_writePin+0x24>
    1142:	d1 c0       	rjmp	.+418    	; 0x12e6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3d 83       	std	Y+5, r19	; 0x05
    114c:	2c 83       	std	Y+4, r18	; 0x04
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	9d 81       	ldd	r25, Y+5	; 0x05
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	09 f4       	brne	.+2      	; 0x115a <GPIO_writePin+0x3a>
    1158:	43 c0       	rjmp	.+134    	; 0x11e0 <GPIO_writePin+0xc0>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	2c f4       	brge	.+10     	; 0x116e <GPIO_writePin+0x4e>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	71 f0       	breq	.+28     	; 0x1188 <GPIO_writePin+0x68>
    116c:	bc c0       	rjmp	.+376    	; 0x12e6 <GPIO_writePin+0x1c6>
    116e:	2c 81       	ldd	r18, Y+4	; 0x04
    1170:	3d 81       	ldd	r19, Y+5	; 0x05
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	09 f4       	brne	.+2      	; 0x117a <GPIO_writePin+0x5a>
    1178:	5f c0       	rjmp	.+190    	; 0x1238 <GPIO_writePin+0x118>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <GPIO_writePin+0x66>
    1184:	85 c0       	rjmp	.+266    	; 0x1290 <GPIO_writePin+0x170>
    1186:	af c0       	rjmp	.+350    	; 0x12e6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	a1 f4       	brne	.+40     	; 0x11b6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    118e:	ab e3       	ldi	r26, 0x3B	; 59
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e3       	ldi	r30, 0x3B	; 59
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <GPIO_writePin+0x8c>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <GPIO_writePin+0x88>
    11b0:	84 2b       	or	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	98 c0       	rjmp	.+304    	; 0x12e6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    11b6:	ab e3       	ldi	r26, 0x3B	; 59
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	eb e3       	ldi	r30, 0x3B	; 59
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_writePin+0xb4>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <GPIO_writePin+0xb0>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	83 c0       	rjmp	.+262    	; 0x12e6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	81 30       	cpi	r24, 0x01	; 1
    11e4:	a1 f4       	brne	.+40     	; 0x120e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11e6:	a8 e3       	ldi	r26, 0x38	; 56
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e8 e3       	ldi	r30, 0x38	; 56
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <GPIO_writePin+0xe4>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <GPIO_writePin+0xe0>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	6c c0       	rjmp	.+216    	; 0x12e6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    120e:	a8 e3       	ldi	r26, 0x38	; 56
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e8 e3       	ldi	r30, 0x38	; 56
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <GPIO_writePin+0x10c>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <GPIO_writePin+0x108>
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	57 c0       	rjmp	.+174    	; 0x12e6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	a1 f4       	brne	.+40     	; 0x1266 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    123e:	a5 e3       	ldi	r26, 0x35	; 53
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e3       	ldi	r30, 0x35	; 53
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <GPIO_writePin+0x13c>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <GPIO_writePin+0x138>
    1260:	84 2b       	or	r24, r20
    1262:	8c 93       	st	X, r24
    1264:	40 c0       	rjmp	.+128    	; 0x12e6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1266:	a5 e3       	ldi	r26, 0x35	; 53
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e5 e3       	ldi	r30, 0x35	; 53
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <GPIO_writePin+0x164>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <GPIO_writePin+0x160>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	2b c0       	rjmp	.+86     	; 0x12e6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	a1 f4       	brne	.+40     	; 0x12be <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1296:	a2 e3       	ldi	r26, 0x32	; 50
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e2 e3       	ldi	r30, 0x32	; 50
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <GPIO_writePin+0x194>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <GPIO_writePin+0x190>
    12b8:	84 2b       	or	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	14 c0       	rjmp	.+40     	; 0x12e6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    12be:	a2 e3       	ldi	r26, 0x32	; 50
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e2 e3       	ldi	r30, 0x32	; 50
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	48 2f       	mov	r20, r24
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	02 2e       	mov	r0, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <GPIO_writePin+0x1bc>
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <GPIO_writePin+0x1b8>
    12e0:	80 95       	com	r24
    12e2:	84 23       	and	r24, r20
    12e4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <GPIO_readPin+0x6>
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <GPIO_readPin+0x8>
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    1304:	8a 83       	std	Y+2, r24	; 0x02
    1306:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1308:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 30       	cpi	r24, 0x08	; 8
    130e:	08 f0       	brcs	.+2      	; 0x1312 <GPIO_readPin+0x1c>
    1310:	84 c0       	rjmp	.+264    	; 0x141a <GPIO_readPin+0x124>
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	08 f0       	brcs	.+2      	; 0x131a <GPIO_readPin+0x24>
    1318:	80 c0       	rjmp	.+256    	; 0x141a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	3d 83       	std	Y+5, r19	; 0x05
    1322:	2c 83       	std	Y+4, r18	; 0x04
    1324:	4c 81       	ldd	r20, Y+4	; 0x04
    1326:	5d 81       	ldd	r21, Y+5	; 0x05
    1328:	41 30       	cpi	r20, 0x01	; 1
    132a:	51 05       	cpc	r21, r1
    132c:	79 f1       	breq	.+94     	; 0x138c <GPIO_readPin+0x96>
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	9d 81       	ldd	r25, Y+5	; 0x05
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	91 05       	cpc	r25, r1
    1336:	34 f4       	brge	.+12     	; 0x1344 <GPIO_readPin+0x4e>
    1338:	2c 81       	ldd	r18, Y+4	; 0x04
    133a:	3d 81       	ldd	r19, Y+5	; 0x05
    133c:	21 15       	cp	r18, r1
    133e:	31 05       	cpc	r19, r1
    1340:	69 f0       	breq	.+26     	; 0x135c <GPIO_readPin+0x66>
    1342:	6b c0       	rjmp	.+214    	; 0x141a <GPIO_readPin+0x124>
    1344:	4c 81       	ldd	r20, Y+4	; 0x04
    1346:	5d 81       	ldd	r21, Y+5	; 0x05
    1348:	42 30       	cpi	r20, 0x02	; 2
    134a:	51 05       	cpc	r21, r1
    134c:	b9 f1       	breq	.+110    	; 0x13bc <GPIO_readPin+0xc6>
    134e:	8c 81       	ldd	r24, Y+4	; 0x04
    1350:	9d 81       	ldd	r25, Y+5	; 0x05
    1352:	83 30       	cpi	r24, 0x03	; 3
    1354:	91 05       	cpc	r25, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <GPIO_readPin+0x64>
    1358:	49 c0       	rjmp	.+146    	; 0x13ec <GPIO_readPin+0xf6>
    135a:	5f c0       	rjmp	.+190    	; 0x141a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    135c:	e9 e3       	ldi	r30, 0x39	; 57
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a9 01       	movw	r20, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <GPIO_readPin+0x7e>
    1370:	55 95       	asr	r21
    1372:	47 95       	ror	r20
    1374:	8a 95       	dec	r24
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <GPIO_readPin+0x7a>
    1378:	ca 01       	movw	r24, r20
    137a:	81 70       	andi	r24, 0x01	; 1
    137c:	90 70       	andi	r25, 0x00	; 0
    137e:	88 23       	and	r24, r24
    1380:	19 f0       	breq	.+6      	; 0x1388 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01
    1386:	49 c0       	rjmp	.+146    	; 0x141a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1388:	19 82       	std	Y+1, r1	; 0x01
    138a:	47 c0       	rjmp	.+142    	; 0x141a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    138c:	e6 e3       	ldi	r30, 0x36	; 54
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	88 2f       	mov	r24, r24
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a9 01       	movw	r20, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <GPIO_readPin+0xae>
    13a0:	55 95       	asr	r21
    13a2:	47 95       	ror	r20
    13a4:	8a 95       	dec	r24
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <GPIO_readPin+0xaa>
    13a8:	ca 01       	movw	r24, r20
    13aa:	81 70       	andi	r24, 0x01	; 1
    13ac:	90 70       	andi	r25, 0x00	; 0
    13ae:	88 23       	and	r24, r24
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	31 c0       	rjmp	.+98     	; 0x141a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13b8:	19 82       	std	Y+1, r1	; 0x01
    13ba:	2f c0       	rjmp	.+94     	; 0x141a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13bc:	e3 e3       	ldi	r30, 0x33	; 51
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	88 2f       	mov	r24, r24
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a9 01       	movw	r20, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <GPIO_readPin+0xde>
    13d0:	55 95       	asr	r21
    13d2:	47 95       	ror	r20
    13d4:	8a 95       	dec	r24
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <GPIO_readPin+0xda>
    13d8:	ca 01       	movw	r24, r20
    13da:	81 70       	andi	r24, 0x01	; 1
    13dc:	90 70       	andi	r25, 0x00	; 0
    13de:	88 23       	and	r24, r24
    13e0:	19 f0       	breq	.+6      	; 0x13e8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	19 c0       	rjmp	.+50     	; 0x141a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13e8:	19 82       	std	Y+1, r1	; 0x01
    13ea:	17 c0       	rjmp	.+46     	; 0x141a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13ec:	e0 e3       	ldi	r30, 0x30	; 48
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a9 01       	movw	r20, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <GPIO_readPin+0x10e>
    1400:	55 95       	asr	r21
    1402:	47 95       	ror	r20
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <GPIO_readPin+0x10a>
    1408:	ca 01       	movw	r24, r20
    140a:	81 70       	andi	r24, 0x01	; 1
    140c:	90 70       	andi	r25, 0x00	; 0
    140e:	88 23       	and	r24, r24
    1410:	19 f0       	breq	.+6      	; 0x1418 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	01 c0       	rjmp	.+2      	; 0x141a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1418:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	00 d0       	rcall	.+0      	; 0x1432 <GPIO_setupPortDirection+0x6>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <GPIO_setupPortDirection+0x8>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	84 30       	cpi	r24, 0x04	; 4
    1440:	90 f5       	brcc	.+100    	; 0x14a6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3c 83       	std	Y+4, r19	; 0x04
    144a:	2b 83       	std	Y+3, r18	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	d1 f0       	breq	.+52     	; 0x148a <GPIO_setupPortDirection+0x5e>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	2c f4       	brge	.+10     	; 0x146a <GPIO_setupPortDirection+0x3e>
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	61 f0       	breq	.+24     	; 0x1480 <GPIO_setupPortDirection+0x54>
    1468:	1e c0       	rjmp	.+60     	; 0x14a6 <GPIO_setupPortDirection+0x7a>
    146a:	2b 81       	ldd	r18, Y+3	; 0x03
    146c:	3c 81       	ldd	r19, Y+4	; 0x04
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	81 f0       	breq	.+32     	; 0x1494 <GPIO_setupPortDirection+0x68>
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	91 05       	cpc	r25, r1
    147c:	81 f0       	breq	.+32     	; 0x149e <GPIO_setupPortDirection+0x72>
    147e:	13 c0       	rjmp	.+38     	; 0x14a6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1480:	ea e3       	ldi	r30, 0x3A	; 58
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 83       	st	Z, r24
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    148a:	e7 e3       	ldi	r30, 0x37	; 55
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	80 83       	st	Z, r24
    1492:	09 c0       	rjmp	.+18     	; 0x14a6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1494:	e4 e3       	ldi	r30, 0x34	; 52
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	80 83       	st	Z, r24
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    149e:	e1 e3       	ldi	r30, 0x31	; 49
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	80 83       	st	Z, r24
			break;
		}
	}
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <GPIO_writePort+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <GPIO_writePort+0x8>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	90 f5       	brcc	.+100    	; 0x152e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	91 05       	cpc	r25, r1
    14dc:	d1 f0       	breq	.+52     	; 0x1512 <GPIO_writePort+0x5e>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <GPIO_writePort+0x3e>
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9c 81       	ldd	r25, Y+4	; 0x04
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	61 f0       	breq	.+24     	; 0x1508 <GPIO_writePort+0x54>
    14f0:	1e c0       	rjmp	.+60     	; 0x152e <GPIO_writePort+0x7a>
    14f2:	2b 81       	ldd	r18, Y+3	; 0x03
    14f4:	3c 81       	ldd	r19, Y+4	; 0x04
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <GPIO_writePort+0x68>
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	91 05       	cpc	r25, r1
    1504:	81 f0       	breq	.+32     	; 0x1526 <GPIO_writePort+0x72>
    1506:	13 c0       	rjmp	.+38     	; 0x152e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	0e c0       	rjmp	.+28     	; 0x152e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1512:	e8 e3       	ldi	r30, 0x38	; 56
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
    151a:	09 c0       	rjmp	.+18     	; 0x152e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    151c:	e5 e3       	ldi	r30, 0x35	; 53
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
    1524:	04 c0       	rjmp	.+8      	; 0x152e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1526:	e2 e3       	ldi	r30, 0x32	; 50
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	80 83       	st	Z, r24
			break;
		}
	}
}
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <GPIO_readPort+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <GPIO_readPort+0x8>
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    154a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	84 30       	cpi	r24, 0x04	; 4
    1550:	90 f5       	brcc	.+100    	; 0x15b6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3c 83       	std	Y+4, r19	; 0x04
    155a:	2b 83       	std	Y+3, r18	; 0x03
    155c:	8b 81       	ldd	r24, Y+3	; 0x03
    155e:	9c 81       	ldd	r25, Y+4	; 0x04
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	91 05       	cpc	r25, r1
    1564:	d1 f0       	breq	.+52     	; 0x159a <GPIO_readPort+0x5e>
    1566:	2b 81       	ldd	r18, Y+3	; 0x03
    1568:	3c 81       	ldd	r19, Y+4	; 0x04
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	2c f4       	brge	.+10     	; 0x157a <GPIO_readPort+0x3e>
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	61 f0       	breq	.+24     	; 0x1590 <GPIO_readPort+0x54>
    1578:	1e c0       	rjmp	.+60     	; 0x15b6 <GPIO_readPort+0x7a>
    157a:	2b 81       	ldd	r18, Y+3	; 0x03
    157c:	3c 81       	ldd	r19, Y+4	; 0x04
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	81 f0       	breq	.+32     	; 0x15a4 <GPIO_readPort+0x68>
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	81 f0       	breq	.+32     	; 0x15ae <GPIO_readPort+0x72>
    158e:	13 c0       	rjmp	.+38     	; 0x15b6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1590:	e9 e3       	ldi	r30, 0x39	; 57
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	0e c0       	rjmp	.+28     	; 0x15b6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    159a:	e6 e3       	ldi	r30, 0x36	; 54
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	09 c0       	rjmp	.+18     	; 0x15b6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15a4:	e3 e3       	ldi	r30, 0x33	; 51
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15ae:	e0 e3       	ldi	r30, 0x30	; 48
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	2e 97       	sbiw	r28, 0x0e	; 14
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	63 e0       	ldi	r22, 0x03	; 3
    15de:	41 e0       	ldi	r20, 0x01	; 1
    15e0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	62 e0       	ldi	r22, 0x02	; 2
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 ea       	ldi	r26, 0xA0	; 160
    15f4:	b1 e4       	ldi	r27, 0x41	; 65
    15f6:	8b 87       	std	Y+11, r24	; 0x0b
    15f8:	9c 87       	std	Y+12, r25	; 0x0c
    15fa:	ad 87       	std	Y+13, r26	; 0x0d
    15fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1600:	7c 85       	ldd	r23, Y+12	; 0x0c
    1602:	8d 85       	ldd	r24, Y+13	; 0x0d
    1604:	9e 85       	ldd	r25, Y+14	; 0x0e
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a ef       	ldi	r20, 0xFA	; 250
    160c:	54 e4       	ldi	r21, 0x44	; 68
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8f 83       	std	Y+7, r24	; 0x07
    1618:	98 87       	std	Y+8, r25	; 0x08
    161a:	a9 87       	std	Y+9, r26	; 0x09
    161c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <LCD_init+0x7a>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9e 83       	std	Y+6, r25	; 0x06
    163c:	8d 83       	std	Y+5, r24	; 0x05
    163e:	3f c0       	rjmp	.+126    	; 0x16be <LCD_init+0xf8>
	else if (__tmp > 65535)
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	6b 85       	ldd	r22, Y+11	; 0x0b
    165a:	7c 85       	ldd	r23, Y+12	; 0x0c
    165c:	8d 85       	ldd	r24, Y+13	; 0x0d
    165e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <LCD_init+0xda>
    1682:	88 ec       	ldi	r24, 0xC8	; 200
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	9c 81       	ldd	r25, Y+4	; 0x04
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <LCD_init+0xc8>
    1692:	9c 83       	std	Y+4, r25	; 0x04
    1694:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <LCD_init+0xbc>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	6f 81       	ldd	r22, Y+7	; 0x07
    16ac:	78 85       	ldd	r23, Y+8	; 0x08
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9e 83       	std	Y+6, r25	; 0x06
    16bc:	8d 83       	std	Y+5, r24	; 0x05
    16be:	8d 81       	ldd	r24, Y+5	; 0x05
    16c0:	9e 81       	ldd	r25, Y+6	; 0x06
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	89 81       	ldd	r24, Y+1	; 0x01
    16c8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD_init+0x104>
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	6f ef       	ldi	r22, 0xFF	; 255
    16d6:	0e 94 16 0a 	call	0x142c	; 0x142c <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    16da:	88 e3       	ldi	r24, 0x38	; 56
    16dc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    16e0:	8c e0       	ldi	r24, 0x0C	; 12
    16e2:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>
}
    16ec:	2e 96       	adiw	r28, 0x0e	; 14
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	e9 97       	sbiw	r28, 0x39	; 57
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	63 e0       	ldi	r22, 0x03	; 3
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e8       	ldi	r26, 0x80	; 128
    1724:	bf e3       	ldi	r27, 0x3F	; 63
    1726:	8d ab       	std	Y+53, r24	; 0x35
    1728:	9e ab       	std	Y+54, r25	; 0x36
    172a:	af ab       	std	Y+55, r26	; 0x37
    172c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172e:	6d a9       	ldd	r22, Y+53	; 0x35
    1730:	7e a9       	ldd	r23, Y+54	; 0x36
    1732:	8f a9       	ldd	r24, Y+55	; 0x37
    1734:	98 ad       	ldd	r25, Y+56	; 0x38
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a ef       	ldi	r20, 0xFA	; 250
    173c:	54 e4       	ldi	r21, 0x44	; 68
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	89 ab       	std	Y+49, r24	; 0x31
    1748:	9a ab       	std	Y+50, r25	; 0x32
    174a:	ab ab       	std	Y+51, r26	; 0x33
    174c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    174e:	69 a9       	ldd	r22, Y+49	; 0x31
    1750:	7a a9       	ldd	r23, Y+50	; 0x32
    1752:	8b a9       	ldd	r24, Y+51	; 0x33
    1754:	9c a9       	ldd	r25, Y+52	; 0x34
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	2c f4       	brge	.+10     	; 0x1770 <LCD_sendCommand+0x72>
		__ticks = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	98 ab       	std	Y+48, r25	; 0x30
    176c:	8f a7       	std	Y+47, r24	; 0x2f
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1770:	69 a9       	ldd	r22, Y+49	; 0x31
    1772:	7a a9       	ldd	r23, Y+50	; 0x32
    1774:	8b a9       	ldd	r24, Y+51	; 0x33
    1776:	9c a9       	ldd	r25, Y+52	; 0x34
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	57 e4       	ldi	r21, 0x47	; 71
    1780:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	4c f5       	brge	.+82     	; 0x17da <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1788:	6d a9       	ldd	r22, Y+53	; 0x35
    178a:	7e a9       	ldd	r23, Y+54	; 0x36
    178c:	8f a9       	ldd	r24, Y+55	; 0x37
    178e:	98 ad       	ldd	r25, Y+56	; 0x38
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	98 ab       	std	Y+48, r25	; 0x30
    17ae:	8f a7       	std	Y+47, r24	; 0x2f
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <LCD_sendCommand+0xd2>
    17b2:	88 ec       	ldi	r24, 0xC8	; 200
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9e a7       	std	Y+46, r25	; 0x2e
    17b8:	8d a7       	std	Y+45, r24	; 0x2d
    17ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    17bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <LCD_sendCommand+0xc0>
    17c2:	9e a7       	std	Y+46, r25	; 0x2e
    17c4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c8:	98 a9       	ldd	r25, Y+48	; 0x30
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	98 ab       	std	Y+48, r25	; 0x30
    17ce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d2:	98 a9       	ldd	r25, Y+48	; 0x30
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f7       	brne	.-38     	; 0x17b2 <LCD_sendCommand+0xb4>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17da:	69 a9       	ldd	r22, Y+49	; 0x31
    17dc:	7a a9       	ldd	r23, Y+50	; 0x32
    17de:	8b a9       	ldd	r24, Y+51	; 0x33
    17e0:	9c a9       	ldd	r25, Y+52	; 0x34
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	98 ab       	std	Y+48, r25	; 0x30
    17ec:	8f a7       	std	Y+47, r24	; 0x2f
    17ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f0:	98 a9       	ldd	r25, Y+48	; 0x30
    17f2:	9c a7       	std	Y+44, r25	; 0x2c
    17f4:	8b a7       	std	Y+43, r24	; 0x2b
    17f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    17f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <LCD_sendCommand+0xfc>
    17fe:	9c a7       	std	Y+44, r25	; 0x2c
    1800:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	62 e0       	ldi	r22, 0x02	; 2
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e8       	ldi	r26, 0x80	; 128
    1812:	bf e3       	ldi	r27, 0x3F	; 63
    1814:	8f a3       	std	Y+39, r24	; 0x27
    1816:	98 a7       	std	Y+40, r25	; 0x28
    1818:	a9 a7       	std	Y+41, r26	; 0x29
    181a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181c:	6f a1       	ldd	r22, Y+39	; 0x27
    181e:	78 a5       	ldd	r23, Y+40	; 0x28
    1820:	89 a5       	ldd	r24, Y+41	; 0x29
    1822:	9a a5       	ldd	r25, Y+42	; 0x2a
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	4a ef       	ldi	r20, 0xFA	; 250
    182a:	54 e4       	ldi	r21, 0x44	; 68
    182c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	8b a3       	std	Y+35, r24	; 0x23
    1836:	9c a3       	std	Y+36, r25	; 0x24
    1838:	ad a3       	std	Y+37, r26	; 0x25
    183a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    183c:	6b a1       	ldd	r22, Y+35	; 0x23
    183e:	7c a1       	ldd	r23, Y+36	; 0x24
    1840:	8d a1       	ldd	r24, Y+37	; 0x25
    1842:	9e a1       	ldd	r25, Y+38	; 0x26
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e8       	ldi	r20, 0x80	; 128
    184a:	5f e3       	ldi	r21, 0x3F	; 63
    184c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1850:	88 23       	and	r24, r24
    1852:	2c f4       	brge	.+10     	; 0x185e <LCD_sendCommand+0x160>
		__ticks = 1;
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9a a3       	std	Y+34, r25	; 0x22
    185a:	89 a3       	std	Y+33, r24	; 0x21
    185c:	3f c0       	rjmp	.+126    	; 0x18dc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    185e:	6b a1       	ldd	r22, Y+35	; 0x23
    1860:	7c a1       	ldd	r23, Y+36	; 0x24
    1862:	8d a1       	ldd	r24, Y+37	; 0x25
    1864:	9e a1       	ldd	r25, Y+38	; 0x26
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	3f ef       	ldi	r19, 0xFF	; 255
    186a:	4f e7       	ldi	r20, 0x7F	; 127
    186c:	57 e4       	ldi	r21, 0x47	; 71
    186e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1872:	18 16       	cp	r1, r24
    1874:	4c f5       	brge	.+82     	; 0x18c8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1876:	6f a1       	ldd	r22, Y+39	; 0x27
    1878:	78 a5       	ldd	r23, Y+40	; 0x28
    187a:	89 a5       	ldd	r24, Y+41	; 0x29
    187c:	9a a5       	ldd	r25, Y+42	; 0x2a
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e2       	ldi	r20, 0x20	; 32
    1884:	51 e4       	ldi	r21, 0x41	; 65
    1886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9a a3       	std	Y+34, r25	; 0x22
    189c:	89 a3       	std	Y+33, r24	; 0x21
    189e:	0f c0       	rjmp	.+30     	; 0x18be <LCD_sendCommand+0x1c0>
    18a0:	88 ec       	ldi	r24, 0xC8	; 200
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	98 a3       	std	Y+32, r25	; 0x20
    18a6:	8f 8f       	std	Y+31, r24	; 0x1f
    18a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18aa:	98 a1       	ldd	r25, Y+32	; 0x20
    18ac:	01 97       	sbiw	r24, 0x01	; 1
    18ae:	f1 f7       	brne	.-4      	; 0x18ac <LCD_sendCommand+0x1ae>
    18b0:	98 a3       	std	Y+32, r25	; 0x20
    18b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b4:	89 a1       	ldd	r24, Y+33	; 0x21
    18b6:	9a a1       	ldd	r25, Y+34	; 0x22
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9a a3       	std	Y+34, r25	; 0x22
    18bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18be:	89 a1       	ldd	r24, Y+33	; 0x21
    18c0:	9a a1       	ldd	r25, Y+34	; 0x22
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	69 f7       	brne	.-38     	; 0x18a0 <LCD_sendCommand+0x1a2>
    18c6:	14 c0       	rjmp	.+40     	; 0x18f0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ca:	7c a1       	ldd	r23, Y+36	; 0x24
    18cc:	8d a1       	ldd	r24, Y+37	; 0x25
    18ce:	9e a1       	ldd	r25, Y+38	; 0x26
    18d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d4:	dc 01       	movw	r26, r24
    18d6:	cb 01       	movw	r24, r22
    18d8:	9a a3       	std	Y+34, r25	; 0x22
    18da:	89 a3       	std	Y+33, r24	; 0x21
    18dc:	89 a1       	ldd	r24, Y+33	; 0x21
    18de:	9a a1       	ldd	r25, Y+34	; 0x22
    18e0:	9e 8f       	std	Y+30, r25	; 0x1e
    18e2:	8d 8f       	std	Y+29, r24	; 0x1d
    18e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_sendCommand+0x1ea>
    18ec:	9e 8f       	std	Y+30, r25	; 0x1e
    18ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	69 ad       	ldd	r22, Y+57	; 0x39
    18f4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <GPIO_writePort>
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a0 e8       	ldi	r26, 0x80	; 128
    18fe:	bf e3       	ldi	r27, 0x3F	; 63
    1900:	89 8f       	std	Y+25, r24	; 0x19
    1902:	9a 8f       	std	Y+26, r25	; 0x1a
    1904:	ab 8f       	std	Y+27, r26	; 0x1b
    1906:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	69 8d       	ldd	r22, Y+25	; 0x19
    190a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    190c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    190e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8d 8b       	std	Y+21, r24	; 0x15
    1922:	9e 8b       	std	Y+22, r25	; 0x16
    1924:	af 8b       	std	Y+23, r26	; 0x17
    1926:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1928:	6d 89       	ldd	r22, Y+21	; 0x15
    192a:	7e 89       	ldd	r23, Y+22	; 0x16
    192c:	8f 89       	ldd	r24, Y+23	; 0x17
    192e:	98 8d       	ldd	r25, Y+24	; 0x18
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9c 8b       	std	Y+20, r25	; 0x14
    1946:	8b 8b       	std	Y+19, r24	; 0x13
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	69 8d       	ldd	r22, Y+25	; 0x19
    1964:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1966:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1968:	9c 8d       	ldd	r25, Y+28	; 0x1c
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9c 8b       	std	Y+20, r25	; 0x14
    1988:	8b 8b       	std	Y+19, r24	; 0x13
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <LCD_sendCommand+0x2ac>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9a 8b       	std	Y+18, r25	; 0x12
    1992:	89 8b       	std	Y+17, r24	; 0x11
    1994:	89 89       	ldd	r24, Y+17	; 0x11
    1996:	9a 89       	ldd	r25, Y+18	; 0x12
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_sendCommand+0x29a>
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8b 89       	ldd	r24, Y+19	; 0x13
    19a2:	9c 89       	ldd	r25, Y+20	; 0x14
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9c 8b       	std	Y+20, r25	; 0x14
    19a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8b 89       	ldd	r24, Y+19	; 0x13
    19ac:	9c 89       	ldd	r25, Y+20	; 0x14
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <LCD_sendCommand+0x28e>
    19b2:	14 c0       	rjmp	.+40     	; 0x19dc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6d 89       	ldd	r22, Y+21	; 0x15
    19b6:	7e 89       	ldd	r23, Y+22	; 0x16
    19b8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ba:	98 8d       	ldd	r25, Y+24	; 0x18
    19bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9c 8b       	std	Y+20, r25	; 0x14
    19c6:	8b 8b       	std	Y+19, r24	; 0x13
    19c8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ca:	9c 89       	ldd	r25, Y+20	; 0x14
    19cc:	98 8b       	std	Y+16, r25	; 0x10
    19ce:	8f 87       	std	Y+15, r24	; 0x0f
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	98 89       	ldd	r25, Y+16	; 0x10
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_sendCommand+0x2d6>
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	62 e0       	ldi	r22, 0x02	; 2
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e8       	ldi	r26, 0x80	; 128
    19ec:	bf e3       	ldi	r27, 0x3F	; 63
    19ee:	8b 87       	std	Y+11, r24	; 0x0b
    19f0:	9c 87       	std	Y+12, r25	; 0x0c
    19f2:	ad 87       	std	Y+13, r26	; 0x0d
    19f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	4a ef       	ldi	r20, 0xFA	; 250
    1a04:	54 e4       	ldi	r21, 0x44	; 68
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	8f 83       	std	Y+7, r24	; 0x07
    1a10:	98 87       	std	Y+8, r25	; 0x08
    1a12:	a9 87       	std	Y+9, r26	; 0x09
    1a14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a16:	6f 81       	ldd	r22, Y+7	; 0x07
    1a18:	78 85       	ldd	r23, Y+8	; 0x08
    1a1a:	89 85       	ldd	r24, Y+9	; 0x09
    1a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	3f c0       	rjmp	.+126    	; 0x1ab6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	4c f5       	brge	.+82     	; 0x1aa2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e2       	ldi	r20, 0x20	; 32
    1a5e:	51 e4       	ldi	r21, 0x41	; 65
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <LCD_sendCommand+0x39a>
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	8b 83       	std	Y+3, r24	; 0x03
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <LCD_sendCommand+0x388>
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <LCD_sendCommand+0x37c>
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <LCD_sendCommand+0x3c4>
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1aca:	e9 96       	adiw	r28, 0x39	; 57
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	e9 97       	sbiw	r28, 0x39	; 57
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	63 e0       	ldi	r22, 0x03	; 3
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	a0 e8       	ldi	r26, 0x80	; 128
    1b02:	bf e3       	ldi	r27, 0x3F	; 63
    1b04:	8d ab       	std	Y+53, r24	; 0x35
    1b06:	9e ab       	std	Y+54, r25	; 0x36
    1b08:	af ab       	std	Y+55, r26	; 0x37
    1b0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b10:	8f a9       	ldd	r24, Y+55	; 0x37
    1b12:	98 ad       	ldd	r25, Y+56	; 0x38
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a ef       	ldi	r20, 0xFA	; 250
    1b1a:	54 e4       	ldi	r21, 0x44	; 68
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	89 ab       	std	Y+49, r24	; 0x31
    1b26:	9a ab       	std	Y+50, r25	; 0x32
    1b28:	ab ab       	std	Y+51, r26	; 0x33
    1b2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b30:	8b a9       	ldd	r24, Y+51	; 0x33
    1b32:	9c a9       	ldd	r25, Y+52	; 0x34
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e8       	ldi	r20, 0x80	; 128
    1b3a:	5f e3       	ldi	r21, 0x3F	; 63
    1b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b40:	88 23       	and	r24, r24
    1b42:	2c f4       	brge	.+10     	; 0x1b4e <LCD_displayCharacter+0x72>
		__ticks = 1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	98 ab       	std	Y+48, r25	; 0x30
    1b4a:	8f a7       	std	Y+47, r24	; 0x2f
    1b4c:	3f c0       	rjmp	.+126    	; 0x1bcc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b50:	7a a9       	ldd	r23, Y+50	; 0x32
    1b52:	8b a9       	ldd	r24, Y+51	; 0x33
    1b54:	9c a9       	ldd	r25, Y+52	; 0x34
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	3f ef       	ldi	r19, 0xFF	; 255
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	4c f5       	brge	.+82     	; 0x1bb8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b66:	6d a9       	ldd	r22, Y+53	; 0x35
    1b68:	7e a9       	ldd	r23, Y+54	; 0x36
    1b6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e2       	ldi	r20, 0x20	; 32
    1b74:	51 e4       	ldi	r21, 0x41	; 65
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	98 ab       	std	Y+48, r25	; 0x30
    1b8c:	8f a7       	std	Y+47, r24	; 0x2f
    1b8e:	0f c0       	rjmp	.+30     	; 0x1bae <LCD_displayCharacter+0xd2>
    1b90:	88 ec       	ldi	r24, 0xC8	; 200
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9e a7       	std	Y+46, r25	; 0x2e
    1b96:	8d a7       	std	Y+45, r24	; 0x2d
    1b98:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_displayCharacter+0xc0>
    1ba0:	9e a7       	std	Y+46, r25	; 0x2e
    1ba2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	98 ab       	std	Y+48, r25	; 0x30
    1bac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <LCD_displayCharacter+0xb4>
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bba:	7a a9       	ldd	r23, Y+50	; 0x32
    1bbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	98 ab       	std	Y+48, r25	; 0x30
    1bca:	8f a7       	std	Y+47, r24	; 0x2f
    1bcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bce:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd0:	9c a7       	std	Y+44, r25	; 0x2c
    1bd2:	8b a7       	std	Y+43, r24	; 0x2b
    1bd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	f1 f7       	brne	.-4      	; 0x1bd8 <LCD_displayCharacter+0xfc>
    1bdc:	9c a7       	std	Y+44, r25	; 0x2c
    1bde:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	62 e0       	ldi	r22, 0x02	; 2
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	a0 e8       	ldi	r26, 0x80	; 128
    1bf0:	bf e3       	ldi	r27, 0x3F	; 63
    1bf2:	8f a3       	std	Y+39, r24	; 0x27
    1bf4:	98 a7       	std	Y+40, r25	; 0x28
    1bf6:	a9 a7       	std	Y+41, r26	; 0x29
    1bf8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a ef       	ldi	r20, 0xFA	; 250
    1c08:	54 e4       	ldi	r21, 0x44	; 68
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8b a3       	std	Y+35, r24	; 0x23
    1c14:	9c a3       	std	Y+36, r25	; 0x24
    1c16:	ad a3       	std	Y+37, r26	; 0x25
    1c18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c20:	9e a1       	ldd	r25, Y+38	; 0x26
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <LCD_displayCharacter+0x160>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9a a3       	std	Y+34, r25	; 0x22
    1c38:	89 a3       	std	Y+33, r24	; 0x21
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c40:	8d a1       	ldd	r24, Y+37	; 0x25
    1c42:	9e a1       	ldd	r25, Y+38	; 0x26
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	4c f5       	brge	.+82     	; 0x1ca6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c54:	6f a1       	ldd	r22, Y+39	; 0x27
    1c56:	78 a5       	ldd	r23, Y+40	; 0x28
    1c58:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9a a3       	std	Y+34, r25	; 0x22
    1c7a:	89 a3       	std	Y+33, r24	; 0x21
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <LCD_displayCharacter+0x1c0>
    1c7e:	88 ec       	ldi	r24, 0xC8	; 200
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	98 a3       	std	Y+32, r25	; 0x20
    1c84:	8f 8f       	std	Y+31, r24	; 0x1f
    1c86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c88:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_displayCharacter+0x1ae>
    1c8e:	98 a3       	std	Y+32, r25	; 0x20
    1c90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c92:	89 a1       	ldd	r24, Y+33	; 0x21
    1c94:	9a a1       	ldd	r25, Y+34	; 0x22
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	9a a3       	std	Y+34, r25	; 0x22
    1c9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	69 f7       	brne	.-38     	; 0x1c7e <LCD_displayCharacter+0x1a2>
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca8:	7c a1       	ldd	r23, Y+36	; 0x24
    1caa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cac:	9e a1       	ldd	r25, Y+38	; 0x26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9a a3       	std	Y+34, r25	; 0x22
    1cb8:	89 a3       	std	Y+33, r24	; 0x21
    1cba:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc0:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_displayCharacter+0x1ea>
    1cca:	9e 8f       	std	Y+30, r25	; 0x1e
    1ccc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	69 ad       	ldd	r22, Y+57	; 0x39
    1cd2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <GPIO_writePort>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e8       	ldi	r26, 0x80	; 128
    1cdc:	bf e3       	ldi	r27, 0x3F	; 63
    1cde:	89 8f       	std	Y+25, r24	; 0x19
    1ce0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ce2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ce4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8d 8b       	std	Y+21, r24	; 0x15
    1d00:	9e 8b       	std	Y+22, r25	; 0x16
    1d02:	af 8b       	std	Y+23, r26	; 0x17
    1d04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d06:	6d 89       	ldd	r22, Y+21	; 0x15
    1d08:	7e 89       	ldd	r23, Y+22	; 0x16
    1d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1d28:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	69 8d       	ldd	r22, Y+25	; 0x19
    1d42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <LCD_displayCharacter+0x2ac>
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	89 8b       	std	Y+17, r24	; 0x11
    1d72:	89 89       	ldd	r24, Y+17	; 0x11
    1d74:	9a 89       	ldd	r25, Y+18	; 0x12
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_displayCharacter+0x29a>
    1d7a:	9a 8b       	std	Y+18, r25	; 0x12
    1d7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d80:	9c 89       	ldd	r25, Y+20	; 0x14
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <LCD_displayCharacter+0x28e>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9c 8b       	std	Y+20, r25	; 0x14
    1da4:	8b 8b       	std	Y+19, r24	; 0x13
    1da6:	8b 89       	ldd	r24, Y+19	; 0x13
    1da8:	9c 89       	ldd	r25, Y+20	; 0x14
    1daa:	98 8b       	std	Y+16, r25	; 0x10
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
    1dae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1db0:	98 89       	ldd	r25, Y+16	; 0x10
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <LCD_displayCharacter+0x2d6>
    1db6:	98 8b       	std	Y+16, r25	; 0x10
    1db8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	62 e0       	ldi	r22, 0x02	; 2
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a0 e8       	ldi	r26, 0x80	; 128
    1dca:	bf e3       	ldi	r27, 0x3F	; 63
    1dcc:	8b 87       	std	Y+11, r24	; 0x0b
    1dce:	9c 87       	std	Y+12, r25	; 0x0c
    1dd0:	ad 87       	std	Y+13, r26	; 0x0d
    1dd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a ef       	ldi	r20, 0xFA	; 250
    1de2:	54 e4       	ldi	r21, 0x44	; 68
    1de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	8f 83       	std	Y+7, r24	; 0x07
    1dee:	98 87       	std	Y+8, r25	; 0x08
    1df0:	a9 87       	std	Y+9, r26	; 0x09
    1df2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1df4:	6f 81       	ldd	r22, Y+7	; 0x07
    1df6:	78 85       	ldd	r23, Y+8	; 0x08
    1df8:	89 85       	ldd	r24, Y+9	; 0x09
    1dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5f e3       	ldi	r21, 0x3F	; 63
    1e04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e08:	88 23       	and	r24, r24
    1e0a:	2c f4       	brge	.+10     	; 0x1e16 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	3f c0       	rjmp	.+126    	; 0x1e94 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	3f ef       	ldi	r19, 0xFF	; 255
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	57 e4       	ldi	r21, 0x47	; 71
    1e26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	4c f5       	brge	.+82     	; 0x1e80 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	0f c0       	rjmp	.+30     	; 0x1e76 <LCD_displayCharacter+0x39a>
    1e58:	88 ec       	ldi	r24, 0xC8	; 200
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_displayCharacter+0x388>
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	69 f7       	brne	.-38     	; 0x1e58 <LCD_displayCharacter+0x37c>
    1e7e:	14 c0       	rjmp	.+40     	; 0x1ea8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	78 85       	ldd	r23, Y+8	; 0x08
    1e84:	89 85       	ldd	r24, Y+9	; 0x09
    1e86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	9e 83       	std	Y+6, r25	; 0x06
    1e92:	8d 83       	std	Y+5, r24	; 0x05
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	9e 81       	ldd	r25, Y+6	; 0x06
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_displayCharacter+0x3c4>
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ea8:	e9 96       	adiw	r28, 0x39	; 57
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <LCD_displayString+0x6>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	9b 83       	std	Y+3, r25	; 0x03
    1ec8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1eca:	19 82       	std	Y+1, r1	; 0x01
    1ecc:	0e c0       	rjmp	.+28     	; 0x1eea <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	80 81       	ld	r24, Z
    1ee0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCD_displayCharacter>
		i++;
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e2 0f       	add	r30, r18
    1ef8:	f3 1f       	adc	r31, r19
    1efa:	80 81       	ld	r24, Z
    1efc:	88 23       	and	r24, r24
    1efe:	39 f7       	brne	.-50     	; 0x1ece <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <LCD_moveCursor+0x6>
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <LCD_moveCursor+0x8>
    1f14:	0f 92       	push	r0
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	8a 83       	std	Y+2, r24	; 0x02
    1f1c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3d 83       	std	Y+5, r19	; 0x05
    1f26:	2c 83       	std	Y+4, r18	; 0x04
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	81 30       	cpi	r24, 0x01	; 1
    1f2e:	91 05       	cpc	r25, r1
    1f30:	c1 f0       	breq	.+48     	; 0x1f62 <LCD_moveCursor+0x56>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	2c f4       	brge	.+10     	; 0x1f46 <LCD_moveCursor+0x3a>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	61 f0       	breq	.+24     	; 0x1f5c <LCD_moveCursor+0x50>
    1f44:	19 c0       	rjmp	.+50     	; 0x1f78 <LCD_moveCursor+0x6c>
    1f46:	2c 81       	ldd	r18, Y+4	; 0x04
    1f48:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4a:	22 30       	cpi	r18, 0x02	; 2
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	69 f0       	breq	.+26     	; 0x1f6a <LCD_moveCursor+0x5e>
    1f50:	8c 81       	ldd	r24, Y+4	; 0x04
    1f52:	9d 81       	ldd	r25, Y+5	; 0x05
    1f54:	83 30       	cpi	r24, 0x03	; 3
    1f56:	91 05       	cpc	r25, r1
    1f58:	61 f0       	breq	.+24     	; 0x1f72 <LCD_moveCursor+0x66>
    1f5a:	0e c0       	rjmp	.+28     	; 0x1f78 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	89 83       	std	Y+1, r24	; 0x01
    1f60:	0b c0       	rjmp	.+22     	; 0x1f78 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	80 5c       	subi	r24, 0xC0	; 192
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	07 c0       	rjmp	.+14     	; 0x1f78 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	80 5f       	subi	r24, 0xF0	; 240
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	03 c0       	rjmp	.+6      	; 0x1f78 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	80 5b       	subi	r24, 0xB0	; 176
    1f76:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	80 68       	ori	r24, 0x80	; 128
    1f7c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>
}
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <LCD_displayStringRowColumn+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <LCD_displayStringRowColumn+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	6a 83       	std	Y+2, r22	; 0x02
    1fa0:	5c 83       	std	Y+4, r21	; 0x04
    1fa2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	6a 81       	ldd	r22, Y+2	; 0x02
    1fa8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	62 97       	sbiw	r28, 0x12	; 18
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	9a 8b       	std	Y+18, r25	; 0x12
    1fd8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1fda:	89 89       	ldd	r24, Y+17	; 0x11
    1fdc:	9a 89       	ldd	r25, Y+18	; 0x12
    1fde:	9e 01       	movw	r18, r28
    1fe0:	2f 5f       	subi	r18, 0xFF	; 255
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	b9 01       	movw	r22, r18
    1fe6:	4a e0       	ldi	r20, 0x0A	; 10
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	0e 94 47 19 	call	0x328e	; 0x328e <itoa>
   LCD_displayString(buff); /* Display the string */
    1fee:	ce 01       	movw	r24, r28
    1ff0:	01 96       	adiw	r24, 0x01	; 1
    1ff2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
}
    1ff6:	62 96       	adiw	r28, 0x12	; 18
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_sendCommand>
}
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	60 97       	sbiw	r28, 0x10	; 16
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	64 e0       	ldi	r22, 0x04	; 4
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	65 e0       	ldi	r22, 0x05	; 5
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	66 e0       	ldi	r22, 0x06	; 6
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	67 e0       	ldi	r22, 0x07	; 7
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	64 e0       	ldi	r22, 0x04	; 4
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2062:	82 e0       	ldi	r24, 0x02	; 2
    2064:	65 e0       	ldi	r22, 0x05	; 5
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	66 e0       	ldi	r22, 0x06	; 6
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	67 e0       	ldi	r22, 0x07	; 7
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2080:	1f 86       	std	Y+15, r1	; 0x0f
    2082:	b4 c0       	rjmp	.+360    	; 0x21ec <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2084:	8f 85       	ldd	r24, Y+15	; 0x0f
    2086:	98 2f       	mov	r25, r24
    2088:	9c 5f       	subi	r25, 0xFC	; 252
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	69 2f       	mov	r22, r25
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2094:	8f 85       	ldd	r24, Y+15	; 0x0f
    2096:	98 2f       	mov	r25, r24
    2098:	9c 5f       	subi	r25, 0xFC	; 252
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	69 2f       	mov	r22, r25
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20a4:	18 8a       	std	Y+16, r1	; 0x10
    20a6:	22 c0       	rjmp	.+68     	; 0x20ec <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    20a8:	88 89       	ldd	r24, Y+16	; 0x10
    20aa:	98 2f       	mov	r25, r24
    20ac:	9c 5f       	subi	r25, 0xFC	; 252
    20ae:	82 e0       	ldi	r24, 0x02	; 2
    20b0:	69 2f       	mov	r22, r25
    20b2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <GPIO_readPin>
    20b6:	88 23       	and	r24, r24
    20b8:	b1 f4       	brne	.+44     	; 0x20e6 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    20ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	98 2f       	mov	r25, r24
    20ca:	88 89       	ldd	r24, Y+16	; 0x10
    20cc:	89 0f       	add	r24, r25
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    20d4:	60 96       	adiw	r28, 0x10	; 16
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20e6:	88 89       	ldd	r24, Y+16	; 0x10
    20e8:	8f 5f       	subi	r24, 0xFF	; 255
    20ea:	88 8b       	std	Y+16, r24	; 0x10
    20ec:	88 89       	ldd	r24, Y+16	; 0x10
    20ee:	84 30       	cpi	r24, 0x04	; 4
    20f0:	d8 f2       	brcs	.-74     	; 0x20a8 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    20f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f4:	98 2f       	mov	r25, r24
    20f6:	9c 5f       	subi	r25, 0xFC	; 252
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	69 2f       	mov	r22, r25
    20fc:	40 e0       	ldi	r20, 0x00	; 0
    20fe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 ea       	ldi	r26, 0xA0	; 160
    2108:	b0 e4       	ldi	r27, 0x40	; 64
    210a:	8b 87       	std	Y+11, r24	; 0x0b
    210c:	9c 87       	std	Y+12, r25	; 0x0c
    210e:	ad 87       	std	Y+13, r26	; 0x0d
    2110:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	6b 85       	ldd	r22, Y+11	; 0x0b
    2114:	7c 85       	ldd	r23, Y+12	; 0x0c
    2116:	8d 85       	ldd	r24, Y+13	; 0x0d
    2118:	9e 85       	ldd	r25, Y+14	; 0x0e
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a ef       	ldi	r20, 0xFA	; 250
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8f 83       	std	Y+7, r24	; 0x07
    212c:	98 87       	std	Y+8, r25	; 0x08
    212e:	a9 87       	std	Y+9, r26	; 0x09
    2130:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2132:	6f 81       	ldd	r22, Y+7	; 0x07
    2134:	78 85       	ldd	r23, Y+8	; 0x08
    2136:	89 85       	ldd	r24, Y+9	; 0x09
    2138:	9a 85       	ldd	r25, Y+10	; 0x0a
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9e 83       	std	Y+6, r25	; 0x06
    2150:	8d 83       	std	Y+5, r24	; 0x05
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    2154:	6f 81       	ldd	r22, Y+7	; 0x07
    2156:	78 85       	ldd	r23, Y+8	; 0x08
    2158:	89 85       	ldd	r24, Y+9	; 0x09
    215a:	9a 85       	ldd	r25, Y+10	; 0x0a
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	6b 85       	ldd	r22, Y+11	; 0x0b
    216e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2170:	8d 85       	ldd	r24, Y+13	; 0x0d
    2172:	9e 85       	ldd	r25, Y+14	; 0x0e
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <KEYPAD_getPressedKey+0x198>
    2196:	88 ec       	ldi	r24, 0xC8	; 200
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <KEYPAD_getPressedKey+0x186>
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8d 81       	ldd	r24, Y+5	; 0x05
    21b6:	9e 81       	ldd	r25, Y+6	; 0x06
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <KEYPAD_getPressedKey+0x17a>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	9e 83       	std	Y+6, r25	; 0x06
    21d0:	8d 83       	std	Y+5, r24	; 0x05
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	9e 81       	ldd	r25, Y+6	; 0x06
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <KEYPAD_getPressedKey+0x1c2>
    21e2:	9a 83       	std	Y+2, r25	; 0x02
    21e4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    21e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	8f 87       	std	Y+15, r24	; 0x0f
    21ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ee:	84 30       	cpi	r24, 0x04	; 4
    21f0:	08 f4       	brcc	.+2      	; 0x21f4 <KEYPAD_getPressedKey+0x1d8>
    21f2:	48 cf       	rjmp	.-368    	; 0x2084 <KEYPAD_getPressedKey+0x68>
    21f4:	45 cf       	rjmp	.-374    	; 0x2080 <KEYPAD_getPressedKey+0x64>

000021f6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <KEYPAD_4x4_adjustKeyNumber+0x6>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <KEYPAD_4x4_adjustKeyNumber+0x8>
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2204:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2206:	8a 81       	ldd	r24, Y+2	; 0x02
    2208:	28 2f       	mov	r18, r24
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	3c 83       	std	Y+4, r19	; 0x04
    220e:	2b 83       	std	Y+3, r18	; 0x03
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	88 30       	cpi	r24, 0x08	; 8
    2216:	91 05       	cpc	r25, r1
    2218:	09 f4       	brne	.+2      	; 0x221c <KEYPAD_4x4_adjustKeyNumber+0x26>
    221a:	6f c0       	rjmp	.+222    	; 0x22fa <KEYPAD_4x4_adjustKeyNumber+0x104>
    221c:	2b 81       	ldd	r18, Y+3	; 0x03
    221e:	3c 81       	ldd	r19, Y+4	; 0x04
    2220:	29 30       	cpi	r18, 0x09	; 9
    2222:	31 05       	cpc	r19, r1
    2224:	54 f5       	brge	.+84     	; 0x227a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	84 30       	cpi	r24, 0x04	; 4
    222c:	91 05       	cpc	r25, r1
    222e:	09 f4       	brne	.+2      	; 0x2232 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2230:	58 c0       	rjmp	.+176    	; 0x22e2 <KEYPAD_4x4_adjustKeyNumber+0xec>
    2232:	2b 81       	ldd	r18, Y+3	; 0x03
    2234:	3c 81       	ldd	r19, Y+4	; 0x04
    2236:	25 30       	cpi	r18, 0x05	; 5
    2238:	31 05       	cpc	r19, r1
    223a:	94 f4       	brge	.+36     	; 0x2260 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	82 30       	cpi	r24, 0x02	; 2
    2242:	91 05       	cpc	r25, r1
    2244:	09 f4       	brne	.+2      	; 0x2248 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2246:	47 c0       	rjmp	.+142    	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0xe0>
    2248:	2b 81       	ldd	r18, Y+3	; 0x03
    224a:	3c 81       	ldd	r19, Y+4	; 0x04
    224c:	23 30       	cpi	r18, 0x03	; 3
    224e:	31 05       	cpc	r19, r1
    2250:	0c f0       	brlt	.+2      	; 0x2254 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2252:	44 c0       	rjmp	.+136    	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0xe6>
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	91 05       	cpc	r25, r1
    225c:	c9 f1       	breq	.+114    	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0xda>
    225e:	67 c0       	rjmp	.+206    	; 0x232e <KEYPAD_4x4_adjustKeyNumber+0x138>
    2260:	2b 81       	ldd	r18, Y+3	; 0x03
    2262:	3c 81       	ldd	r19, Y+4	; 0x04
    2264:	26 30       	cpi	r18, 0x06	; 6
    2266:	31 05       	cpc	r19, r1
    2268:	09 f4       	brne	.+2      	; 0x226c <KEYPAD_4x4_adjustKeyNumber+0x76>
    226a:	41 c0       	rjmp	.+130    	; 0x22ee <KEYPAD_4x4_adjustKeyNumber+0xf8>
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	87 30       	cpi	r24, 0x07	; 7
    2272:	91 05       	cpc	r25, r1
    2274:	0c f0       	brlt	.+2      	; 0x2278 <KEYPAD_4x4_adjustKeyNumber+0x82>
    2276:	3e c0       	rjmp	.+124    	; 0x22f4 <KEYPAD_4x4_adjustKeyNumber+0xfe>
    2278:	37 c0       	rjmp	.+110    	; 0x22e8 <KEYPAD_4x4_adjustKeyNumber+0xf2>
    227a:	2b 81       	ldd	r18, Y+3	; 0x03
    227c:	3c 81       	ldd	r19, Y+4	; 0x04
    227e:	2c 30       	cpi	r18, 0x0C	; 12
    2280:	31 05       	cpc	r19, r1
    2282:	09 f4       	brne	.+2      	; 0x2286 <KEYPAD_4x4_adjustKeyNumber+0x90>
    2284:	45 c0       	rjmp	.+138    	; 0x2310 <KEYPAD_4x4_adjustKeyNumber+0x11a>
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	8d 30       	cpi	r24, 0x0D	; 13
    228c:	91 05       	cpc	r25, r1
    228e:	5c f4       	brge	.+22     	; 0x22a6 <KEYPAD_4x4_adjustKeyNumber+0xb0>
    2290:	2b 81       	ldd	r18, Y+3	; 0x03
    2292:	3c 81       	ldd	r19, Y+4	; 0x04
    2294:	2a 30       	cpi	r18, 0x0A	; 10
    2296:	31 05       	cpc	r19, r1
    2298:	a9 f1       	breq	.+106    	; 0x2304 <KEYPAD_4x4_adjustKeyNumber+0x10e>
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	8b 30       	cpi	r24, 0x0B	; 11
    22a0:	91 05       	cpc	r25, r1
    22a2:	9c f5       	brge	.+102    	; 0x230a <KEYPAD_4x4_adjustKeyNumber+0x114>
    22a4:	2c c0       	rjmp	.+88     	; 0x22fe <KEYPAD_4x4_adjustKeyNumber+0x108>
    22a6:	2b 81       	ldd	r18, Y+3	; 0x03
    22a8:	3c 81       	ldd	r19, Y+4	; 0x04
    22aa:	2e 30       	cpi	r18, 0x0E	; 14
    22ac:	31 05       	cpc	r19, r1
    22ae:	b1 f1       	breq	.+108    	; 0x231c <KEYPAD_4x4_adjustKeyNumber+0x126>
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	8e 30       	cpi	r24, 0x0E	; 14
    22b6:	91 05       	cpc	r25, r1
    22b8:	74 f1       	brlt	.+92     	; 0x2316 <KEYPAD_4x4_adjustKeyNumber+0x120>
    22ba:	2b 81       	ldd	r18, Y+3	; 0x03
    22bc:	3c 81       	ldd	r19, Y+4	; 0x04
    22be:	2f 30       	cpi	r18, 0x0F	; 15
    22c0:	31 05       	cpc	r19, r1
    22c2:	79 f1       	breq	.+94     	; 0x2322 <KEYPAD_4x4_adjustKeyNumber+0x12c>
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	9c 81       	ldd	r25, Y+4	; 0x04
    22c8:	80 31       	cpi	r24, 0x10	; 16
    22ca:	91 05       	cpc	r25, r1
    22cc:	69 f1       	breq	.+90     	; 0x2328 <KEYPAD_4x4_adjustKeyNumber+0x132>
    22ce:	2f c0       	rjmp	.+94     	; 0x232e <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
		case 1: keypad_button = 7;
    22d0:	87 e0       	ldi	r24, 0x07	; 7
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	2e c0       	rjmp	.+92     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: keypad_button = 4;
    22d6:	84 e0       	ldi	r24, 0x04	; 4
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	2b c0       	rjmp	.+86     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: keypad_button = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	28 c0       	rjmp	.+80     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: keypad_button = 13; // ASCII Code of Enter " on/c "
    22e2:	8d e0       	ldi	r24, 0x0D	; 13
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	25 c0       	rjmp	.+74     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: keypad_button = 8;
    22e8:	88 e0       	ldi	r24, 0x08	; 8
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	22 c0       	rjmp	.+68     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: keypad_button = 5;
    22ee:	85 e0       	ldi	r24, 0x05	; 5
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	1f c0       	rjmp	.+62     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: keypad_button = 2;
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	1c c0       	rjmp	.+56     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: keypad_button = 0;
    22fa:	19 82       	std	Y+1, r1	; 0x01
    22fc:	1a c0       	rjmp	.+52     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: keypad_button = 9;
    22fe:	89 e0       	ldi	r24, 0x09	; 9
    2300:	89 83       	std	Y+1, r24	; 0x01
    2302:	17 c0       	rjmp	.+46     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: keypad_button = 6;
    2304:	86 e0       	ldi	r24, 0x06	; 6
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: keypad_button = 3;
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	11 c0       	rjmp	.+34     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: keypad_button = '=';  /* ASCII Code of '=' */
    2310:	8d e3       	ldi	r24, 0x3D	; 61
    2312:	89 83       	std	Y+1, r24	; 0x01
    2314:	0e c0       	rjmp	.+28     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: keypad_button = '%';  /* ASCII Code of '%' */
    2316:	85 e2       	ldi	r24, 0x25	; 37
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	0b c0       	rjmp	.+22     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: keypad_button = '*';  /* ASCII Code of '*' */
    231c:	8a e2       	ldi	r24, 0x2A	; 42
    231e:	89 83       	std	Y+1, r24	; 0x01
    2320:	08 c0       	rjmp	.+16     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: keypad_button = '-';  /* ASCII Code of '-' */
    2322:	8d e2       	ldi	r24, 0x2D	; 45
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	05 c0       	rjmp	.+10     	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: keypad_button = '+';  /* ASCII Code of '+' */
    2328:	8b e2       	ldi	r24, 0x2B	; 43
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <KEYPAD_4x4_adjustKeyNumber+0x13c>
				break;
		default: keypad_button = button_number;
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2332:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <Timer1_callBack>:
*******************************************************************************/
/* Description:
 * It is the callback function and it increments the ticks of the timer.
 */
void Timer1_callBack(void)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
	g_tickTime++;
    234a:	80 91 4e 01 	lds	r24, 0x014E
    234e:	8f 5f       	subi	r24, 0xFF	; 255
    2350:	80 93 4e 01 	sts	0x014E, r24
}
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <input_Password>:

/* Description:
 * Getting the Password from the user & sending it to CONTROL_ECU via UART
 */
void input_Password(void)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	6e 97       	sbiw	r28, 0x1e	; 30
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
	uint8 key,idx;

	for (idx = 0; idx < PASSWORD_SIZE; idx++)
    236e:	1d 8e       	std	Y+29, r1	; 0x1d
    2370:	85 c0       	rjmp	.+266    	; 0x247c <input_Password+0x122>
	{
		key = KEYPAD_getPressedKey();
    2372:	0e 94 0e 10 	call	0x201c	; 0x201c <KEYPAD_getPressedKey>
    2376:	8e 8f       	std	Y+30, r24	; 0x1e
		if ((key <= 9) && (key >= 0))
    2378:	8e 8d       	ldd	r24, Y+30	; 0x1e
    237a:	8a 30       	cpi	r24, 0x0A	; 10
    237c:	38 f4       	brcc	.+14     	; 0x238c <input_Password+0x32>
		{
			LCD_displayCharacter('*');
    237e:	8a e2       	ldi	r24, 0x2A	; 42
    2380:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCD_displayCharacter>
			/* send the pressed key to the CONTROL_ECU */
			UART_sendByte(key);
    2384:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2386:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
    238a:	03 c0       	rjmp	.+6      	; 0x2392 <input_Password+0x38>
		}
		else
		{
			/* to make the UART send five numbers only not including any characters */
			idx--;
    238c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    238e:	81 50       	subi	r24, 0x01	; 1
    2390:	8d 8f       	std	Y+29, r24	; 0x1d
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	aa ef       	ldi	r26, 0xFA	; 250
    2398:	b3 e4       	ldi	r27, 0x43	; 67
    239a:	89 8f       	std	Y+25, r24	; 0x19
    239c:	9a 8f       	std	Y+26, r25	; 0x1a
    239e:	ab 8f       	std	Y+27, r26	; 0x1b
    23a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	69 8d       	ldd	r22, Y+25	; 0x19
    23a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	4a ef       	ldi	r20, 0xFA	; 250
    23b0:	54 e4       	ldi	r21, 0x44	; 68
    23b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	8d 8b       	std	Y+21, r24	; 0x15
    23bc:	9e 8b       	std	Y+22, r25	; 0x16
    23be:	af 8b       	std	Y+23, r26	; 0x17
    23c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23c2:	6d 89       	ldd	r22, Y+21	; 0x15
    23c4:	7e 89       	ldd	r23, Y+22	; 0x16
    23c6:	8f 89       	ldd	r24, Y+23	; 0x17
    23c8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	40 e8       	ldi	r20, 0x80	; 128
    23d0:	5f e3       	ldi	r21, 0x3F	; 63
    23d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d6:	88 23       	and	r24, r24
    23d8:	2c f4       	brge	.+10     	; 0x23e4 <input_Password+0x8a>
		__ticks = 1;
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
    23e2:	3f c0       	rjmp	.+126    	; 0x2462 <input_Password+0x108>
	else if (__tmp > 65535)
    23e4:	6d 89       	ldd	r22, Y+21	; 0x15
    23e6:	7e 89       	ldd	r23, Y+22	; 0x16
    23e8:	8f 89       	ldd	r24, Y+23	; 0x17
    23ea:	98 8d       	ldd	r25, Y+24	; 0x18
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	4c f5       	brge	.+82     	; 0x244e <input_Password+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fc:	69 8d       	ldd	r22, Y+25	; 0x19
    23fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2400:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2402:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e2       	ldi	r20, 0x20	; 32
    240a:	51 e4       	ldi	r21, 0x41	; 65
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	9c 8b       	std	Y+20, r25	; 0x14
    2422:	8b 8b       	std	Y+19, r24	; 0x13
    2424:	0f c0       	rjmp	.+30     	; 0x2444 <input_Password+0xea>
    2426:	88 ec       	ldi	r24, 0xC8	; 200
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	9a 8b       	std	Y+18, r25	; 0x12
    242c:	89 8b       	std	Y+17, r24	; 0x11
    242e:	89 89       	ldd	r24, Y+17	; 0x11
    2430:	9a 89       	ldd	r25, Y+18	; 0x12
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	f1 f7       	brne	.-4      	; 0x2432 <input_Password+0xd8>
    2436:	9a 8b       	std	Y+18, r25	; 0x12
    2438:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243a:	8b 89       	ldd	r24, Y+19	; 0x13
    243c:	9c 89       	ldd	r25, Y+20	; 0x14
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	9c 8b       	std	Y+20, r25	; 0x14
    2442:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2444:	8b 89       	ldd	r24, Y+19	; 0x13
    2446:	9c 89       	ldd	r25, Y+20	; 0x14
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	69 f7       	brne	.-38     	; 0x2426 <input_Password+0xcc>
    244c:	14 c0       	rjmp	.+40     	; 0x2476 <input_Password+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244e:	6d 89       	ldd	r22, Y+21	; 0x15
    2450:	7e 89       	ldd	r23, Y+22	; 0x16
    2452:	8f 89       	ldd	r24, Y+23	; 0x17
    2454:	98 8d       	ldd	r25, Y+24	; 0x18
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	8b 8b       	std	Y+19, r24	; 0x13
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	98 8b       	std	Y+16, r25	; 0x10
    2468:	8f 87       	std	Y+15, r24	; 0x0f
    246a:	8f 85       	ldd	r24, Y+15	; 0x0f
    246c:	98 89       	ldd	r25, Y+16	; 0x10
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <input_Password+0x114>
    2472:	98 8b       	std	Y+16, r25	; 0x10
    2474:	8f 87       	std	Y+15, r24	; 0x0f
 */
void input_Password(void)
{
	uint8 key,idx;

	for (idx = 0; idx < PASSWORD_SIZE; idx++)
    2476:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	8d 8f       	std	Y+29, r24	; 0x1d
    247c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    247e:	85 30       	cpi	r24, 0x05	; 5
    2480:	08 f4       	brcc	.+2      	; 0x2484 <input_Password+0x12a>
    2482:	77 cf       	rjmp	.-274    	; 0x2372 <input_Password+0x18>
			idx--;
		}
		_delay_ms(500); /* Press time */
	}

	key = KEYPAD_getPressedKey();
    2484:	0e 94 0e 10 	call	0x201c	; 0x201c <KEYPAD_getPressedKey>
    2488:	8e 8f       	std	Y+30, r24	; 0x1e
	if (key == KEYPAD_ENTER_KEY)
    248a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    248c:	85 32       	cpi	r24, 0x25	; 37
    248e:	09 f0       	breq	.+2      	; 0x2492 <input_Password+0x138>
    2490:	76 c0       	rjmp	.+236    	; 0x257e <input_Password+0x224>
	{
		/* Receive a byte 1 or 0 to check that the two passwords are matched or not */
		control_received_data = UART_recieveByte();
    2492:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2496:	80 93 4f 01 	sts	0x014F, r24
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	aa ef       	ldi	r26, 0xFA	; 250
    24a0:	b3 e4       	ldi	r27, 0x43	; 67
    24a2:	8b 87       	std	Y+11, r24	; 0x0b
    24a4:	9c 87       	std	Y+12, r25	; 0x0c
    24a6:	ad 87       	std	Y+13, r26	; 0x0d
    24a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	4a ef       	ldi	r20, 0xFA	; 250
    24b8:	54 e4       	ldi	r21, 0x44	; 68
    24ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	8f 83       	std	Y+7, r24	; 0x07
    24c4:	98 87       	std	Y+8, r25	; 0x08
    24c6:	a9 87       	std	Y+9, r26	; 0x09
    24c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ca:	6f 81       	ldd	r22, Y+7	; 0x07
    24cc:	78 85       	ldd	r23, Y+8	; 0x08
    24ce:	89 85       	ldd	r24, Y+9	; 0x09
    24d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e8       	ldi	r20, 0x80	; 128
    24d8:	5f e3       	ldi	r21, 0x3F	; 63
    24da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24de:	88 23       	and	r24, r24
    24e0:	2c f4       	brge	.+10     	; 0x24ec <input_Password+0x192>
		__ticks = 1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	9e 83       	std	Y+6, r25	; 0x06
    24e8:	8d 83       	std	Y+5, r24	; 0x05
    24ea:	3f c0       	rjmp	.+126    	; 0x256a <input_Password+0x210>
	else if (__tmp > 65535)
    24ec:	6f 81       	ldd	r22, Y+7	; 0x07
    24ee:	78 85       	ldd	r23, Y+8	; 0x08
    24f0:	89 85       	ldd	r24, Y+9	; 0x09
    24f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	3f ef       	ldi	r19, 0xFF	; 255
    24f8:	4f e7       	ldi	r20, 0x7F	; 127
    24fa:	57 e4       	ldi	r21, 0x47	; 71
    24fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2500:	18 16       	cp	r1, r24
    2502:	4c f5       	brge	.+82     	; 0x2556 <input_Password+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2504:	6b 85       	ldd	r22, Y+11	; 0x0b
    2506:	7c 85       	ldd	r23, Y+12	; 0x0c
    2508:	8d 85       	ldd	r24, Y+13	; 0x0d
    250a:	9e 85       	ldd	r25, Y+14	; 0x0e
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
    252c:	0f c0       	rjmp	.+30     	; 0x254c <input_Password+0x1f2>
    252e:	88 ec       	ldi	r24, 0xC8	; 200
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	9c 83       	std	Y+4, r25	; 0x04
    2534:	8b 83       	std	Y+3, r24	; 0x03
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <input_Password+0x1e0>
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	9e 83       	std	Y+6, r25	; 0x06
    254a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f7       	brne	.-38     	; 0x252e <input_Password+0x1d4>
    2554:	14 c0       	rjmp	.+40     	; 0x257e <input_Password+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	6f 81       	ldd	r22, Y+7	; 0x07
    2558:	78 85       	ldd	r23, Y+8	; 0x08
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	9a 83       	std	Y+2, r25	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	9a 81       	ldd	r25, Y+2	; 0x02
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <input_Password+0x21c>
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
		/* to give the UART time to receive the byte */
		_delay_ms(500);
	}
}
    257e:	6e 96       	adiw	r28, 0x1e	; 30
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <change_Password>:

/* Description:
 * Responsible for changing the password first time and for any time the user wants to change it
 */
void change_Password(void)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	ac 97       	sbiw	r28, 0x2c	; 44
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
	uint8 key, idx;
	for (idx = 0; idx < PASSWORD_SIZE ; idx++)
    25a4:	1b a6       	std	Y+43, r1	; 0x2b
    25a6:	85 c0       	rjmp	.+266    	; 0x26b2 <change_Password+0x122>
	{
		/* Get the pressed key number,
		 * if any switch pressed for more than 500 ms it will considered more than one press */
		key = KEYPAD_getPressedKey();
    25a8:	0e 94 0e 10 	call	0x201c	; 0x201c <KEYPAD_getPressedKey>
    25ac:	8c a7       	std	Y+44, r24	; 0x2c

		if ((key <= 9) && (key >= 0))
    25ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    25b0:	8a 30       	cpi	r24, 0x0A	; 10
    25b2:	38 f4       	brcc	.+14     	; 0x25c2 <change_Password+0x32>
		{
			LCD_displayCharacter('*');
    25b4:	8a e2       	ldi	r24, 0x2A	; 42
    25b6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCD_displayCharacter>
			/* send the pressed key to the CONTROL_ECU */
			UART_sendByte(key);
    25ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    25bc:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
    25c0:	03 c0       	rjmp	.+6      	; 0x25c8 <change_Password+0x38>
		}
		else
		{
			/* to make the UART send five numbers only not including any characters */
			idx--;
    25c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    25c4:	81 50       	subi	r24, 0x01	; 1
    25c6:	8b a7       	std	Y+43, r24	; 0x2b
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	aa ef       	ldi	r26, 0xFA	; 250
    25ce:	b3 e4       	ldi	r27, 0x43	; 67
    25d0:	8f a3       	std	Y+39, r24	; 0x27
    25d2:	98 a7       	std	Y+40, r25	; 0x28
    25d4:	a9 a7       	std	Y+41, r26	; 0x29
    25d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	6f a1       	ldd	r22, Y+39	; 0x27
    25da:	78 a5       	ldd	r23, Y+40	; 0x28
    25dc:	89 a5       	ldd	r24, Y+41	; 0x29
    25de:	9a a5       	ldd	r25, Y+42	; 0x2a
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a ef       	ldi	r20, 0xFA	; 250
    25e6:	54 e4       	ldi	r21, 0x44	; 68
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8b a3       	std	Y+35, r24	; 0x23
    25f2:	9c a3       	std	Y+36, r25	; 0x24
    25f4:	ad a3       	std	Y+37, r26	; 0x25
    25f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25f8:	6b a1       	ldd	r22, Y+35	; 0x23
    25fa:	7c a1       	ldd	r23, Y+36	; 0x24
    25fc:	8d a1       	ldd	r24, Y+37	; 0x25
    25fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <change_Password+0x8a>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9a a3       	std	Y+34, r25	; 0x22
    2616:	89 a3       	std	Y+33, r24	; 0x21
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <change_Password+0x108>
	else if (__tmp > 65535)
    261a:	6b a1       	ldd	r22, Y+35	; 0x23
    261c:	7c a1       	ldd	r23, Y+36	; 0x24
    261e:	8d a1       	ldd	r24, Y+37	; 0x25
    2620:	9e a1       	ldd	r25, Y+38	; 0x26
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <change_Password+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	6f a1       	ldd	r22, Y+39	; 0x27
    2634:	78 a5       	ldd	r23, Y+40	; 0x28
    2636:	89 a5       	ldd	r24, Y+41	; 0x29
    2638:	9a a5       	ldd	r25, Y+42	; 0x2a
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9a a3       	std	Y+34, r25	; 0x22
    2658:	89 a3       	std	Y+33, r24	; 0x21
    265a:	0f c0       	rjmp	.+30     	; 0x267a <change_Password+0xea>
    265c:	88 ec       	ldi	r24, 0xC8	; 200
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	98 a3       	std	Y+32, r25	; 0x20
    2662:	8f 8f       	std	Y+31, r24	; 0x1f
    2664:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2666:	98 a1       	ldd	r25, Y+32	; 0x20
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <change_Password+0xd8>
    266c:	98 a3       	std	Y+32, r25	; 0x20
    266e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	89 a1       	ldd	r24, Y+33	; 0x21
    2672:	9a a1       	ldd	r25, Y+34	; 0x22
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9a a3       	std	Y+34, r25	; 0x22
    2678:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	89 a1       	ldd	r24, Y+33	; 0x21
    267c:	9a a1       	ldd	r25, Y+34	; 0x22
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <change_Password+0xcc>
    2682:	14 c0       	rjmp	.+40     	; 0x26ac <change_Password+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	6b a1       	ldd	r22, Y+35	; 0x23
    2686:	7c a1       	ldd	r23, Y+36	; 0x24
    2688:	8d a1       	ldd	r24, Y+37	; 0x25
    268a:	9e a1       	ldd	r25, Y+38	; 0x26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9a a3       	std	Y+34, r25	; 0x22
    2696:	89 a3       	std	Y+33, r24	; 0x21
    2698:	89 a1       	ldd	r24, Y+33	; 0x21
    269a:	9a a1       	ldd	r25, Y+34	; 0x22
    269c:	9e 8f       	std	Y+30, r25	; 0x1e
    269e:	8d 8f       	std	Y+29, r24	; 0x1d
    26a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <change_Password+0x114>
    26a8:	9e 8f       	std	Y+30, r25	; 0x1e
    26aa:	8d 8f       	std	Y+29, r24	; 0x1d
 * Responsible for changing the password first time and for any time the user wants to change it
 */
void change_Password(void)
{
	uint8 key, idx;
	for (idx = 0; idx < PASSWORD_SIZE ; idx++)
    26ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ae:	8f 5f       	subi	r24, 0xFF	; 255
    26b0:	8b a7       	std	Y+43, r24	; 0x2b
    26b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b4:	85 30       	cpi	r24, 0x05	; 5
    26b6:	08 f4       	brcc	.+2      	; 0x26ba <change_Password+0x12a>
    26b8:	77 cf       	rjmp	.-274    	; 0x25a8 <change_Password+0x18>
			idx--;
		}
		_delay_ms(500); /* Press time */
	}

	key = KEYPAD_getPressedKey();
    26ba:	0e 94 0e 10 	call	0x201c	; 0x201c <KEYPAD_getPressedKey>
    26be:	8c a7       	std	Y+44, r24	; 0x2c
	if (key == KEYPAD_ENTER_KEY)
    26c0:	8c a5       	ldd	r24, Y+44	; 0x2c
    26c2:	85 32       	cpi	r24, 0x25	; 37
    26c4:	81 f4       	brne	.+32     	; 0x26e6 <change_Password+0x156>
	{
		/* Asking the user to enter the same password */
		LCD_clearScreen();
    26c6:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Plz re-enter the");
    26ca:	20 e6       	ldi	r18, 0x60	; 96
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	a9 01       	movw	r20, r18
    26d4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Same Pass:");
    26d8:	21 e7       	ldi	r18, 0x71	; 113
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	a9 01       	movw	r20, r18
    26e2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
	}
	LCD_moveCursor(1, 11);
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	6b e0       	ldi	r22, 0x0B	; 11
    26ea:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>

	for (idx = 0; idx < PASSWORD_SIZE; idx++)
    26ee:	1b a6       	std	Y+43, r1	; 0x2b
    26f0:	85 c0       	rjmp	.+266    	; 0x27fc <change_Password+0x26c>
	{
		key = KEYPAD_getPressedKey();
    26f2:	0e 94 0e 10 	call	0x201c	; 0x201c <KEYPAD_getPressedKey>
    26f6:	8c a7       	std	Y+44, r24	; 0x2c
		if ((key <= 9) && (key >= 0))
    26f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    26fa:	8a 30       	cpi	r24, 0x0A	; 10
    26fc:	38 f4       	brcc	.+14     	; 0x270c <change_Password+0x17c>
		{
			LCD_displayCharacter('*');
    26fe:	8a e2       	ldi	r24, 0x2A	; 42
    2700:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCD_displayCharacter>
			/* send the pressed key to the CONTROL_ECU */
			UART_sendByte(key);
    2704:	8c a5       	ldd	r24, Y+44	; 0x2c
    2706:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
    270a:	03 c0       	rjmp	.+6      	; 0x2712 <change_Password+0x182>
		}
		else
		{
			/* to make the UART send five numbers only not including any characters */
			idx--;
    270c:	8b a5       	ldd	r24, Y+43	; 0x2b
    270e:	81 50       	subi	r24, 0x01	; 1
    2710:	8b a7       	std	Y+43, r24	; 0x2b
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	aa ef       	ldi	r26, 0xFA	; 250
    2718:	b3 e4       	ldi	r27, 0x43	; 67
    271a:	89 8f       	std	Y+25, r24	; 0x19
    271c:	9a 8f       	std	Y+26, r25	; 0x1a
    271e:	ab 8f       	std	Y+27, r26	; 0x1b
    2720:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2722:	69 8d       	ldd	r22, Y+25	; 0x19
    2724:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2726:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2728:	9c 8d       	ldd	r25, Y+28	; 0x1c
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	4a ef       	ldi	r20, 0xFA	; 250
    2730:	54 e4       	ldi	r21, 0x44	; 68
    2732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	8d 8b       	std	Y+21, r24	; 0x15
    273c:	9e 8b       	std	Y+22, r25	; 0x16
    273e:	af 8b       	std	Y+23, r26	; 0x17
    2740:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2742:	6d 89       	ldd	r22, Y+21	; 0x15
    2744:	7e 89       	ldd	r23, Y+22	; 0x16
    2746:	8f 89       	ldd	r24, Y+23	; 0x17
    2748:	98 8d       	ldd	r25, Y+24	; 0x18
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e8       	ldi	r20, 0x80	; 128
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2756:	88 23       	and	r24, r24
    2758:	2c f4       	brge	.+10     	; 0x2764 <change_Password+0x1d4>
		__ticks = 1;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9c 8b       	std	Y+20, r25	; 0x14
    2760:	8b 8b       	std	Y+19, r24	; 0x13
    2762:	3f c0       	rjmp	.+126    	; 0x27e2 <change_Password+0x252>
	else if (__tmp > 65535)
    2764:	6d 89       	ldd	r22, Y+21	; 0x15
    2766:	7e 89       	ldd	r23, Y+22	; 0x16
    2768:	8f 89       	ldd	r24, Y+23	; 0x17
    276a:	98 8d       	ldd	r25, Y+24	; 0x18
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	3f ef       	ldi	r19, 0xFF	; 255
    2770:	4f e7       	ldi	r20, 0x7F	; 127
    2772:	57 e4       	ldi	r21, 0x47	; 71
    2774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2778:	18 16       	cp	r1, r24
    277a:	4c f5       	brge	.+82     	; 0x27ce <change_Password+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277c:	69 8d       	ldd	r22, Y+25	; 0x19
    277e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2782:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e2       	ldi	r20, 0x20	; 32
    278a:	51 e4       	ldi	r21, 0x41	; 65
    278c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	bc 01       	movw	r22, r24
    2796:	cd 01       	movw	r24, r26
    2798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	9c 8b       	std	Y+20, r25	; 0x14
    27a2:	8b 8b       	std	Y+19, r24	; 0x13
    27a4:	0f c0       	rjmp	.+30     	; 0x27c4 <change_Password+0x234>
    27a6:	88 ec       	ldi	r24, 0xC8	; 200
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	9a 8b       	std	Y+18, r25	; 0x12
    27ac:	89 8b       	std	Y+17, r24	; 0x11
    27ae:	89 89       	ldd	r24, Y+17	; 0x11
    27b0:	9a 89       	ldd	r25, Y+18	; 0x12
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <change_Password+0x222>
    27b6:	9a 8b       	std	Y+18, r25	; 0x12
    27b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ba:	8b 89       	ldd	r24, Y+19	; 0x13
    27bc:	9c 89       	ldd	r25, Y+20	; 0x14
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	9c 8b       	std	Y+20, r25	; 0x14
    27c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c4:	8b 89       	ldd	r24, Y+19	; 0x13
    27c6:	9c 89       	ldd	r25, Y+20	; 0x14
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	69 f7       	brne	.-38     	; 0x27a6 <change_Password+0x216>
    27cc:	14 c0       	rjmp	.+40     	; 0x27f6 <change_Password+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ce:	6d 89       	ldd	r22, Y+21	; 0x15
    27d0:	7e 89       	ldd	r23, Y+22	; 0x16
    27d2:	8f 89       	ldd	r24, Y+23	; 0x17
    27d4:	98 8d       	ldd	r25, Y+24	; 0x18
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9c 8b       	std	Y+20, r25	; 0x14
    27e0:	8b 8b       	std	Y+19, r24	; 0x13
    27e2:	8b 89       	ldd	r24, Y+19	; 0x13
    27e4:	9c 89       	ldd	r25, Y+20	; 0x14
    27e6:	98 8b       	std	Y+16, r25	; 0x10
    27e8:	8f 87       	std	Y+15, r24	; 0x0f
    27ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ec:	98 89       	ldd	r25, Y+16	; 0x10
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <change_Password+0x25e>
    27f2:	98 8b       	std	Y+16, r25	; 0x10
    27f4:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_displayStringRowColumn(0, 0, "Plz re-enter the");
		LCD_displayStringRowColumn(1, 0, "Same Pass:");
	}
	LCD_moveCursor(1, 11);

	for (idx = 0; idx < PASSWORD_SIZE; idx++)
    27f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    27f8:	8f 5f       	subi	r24, 0xFF	; 255
    27fa:	8b a7       	std	Y+43, r24	; 0x2b
    27fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    27fe:	85 30       	cpi	r24, 0x05	; 5
    2800:	08 f4       	brcc	.+2      	; 0x2804 <change_Password+0x274>
    2802:	77 cf       	rjmp	.-274    	; 0x26f2 <change_Password+0x162>
			idx--;
		}
		_delay_ms(500); /* Press time */
	}

	key = KEYPAD_getPressedKey();
    2804:	0e 94 0e 10 	call	0x201c	; 0x201c <KEYPAD_getPressedKey>
    2808:	8c a7       	std	Y+44, r24	; 0x2c
	if (key == KEYPAD_ENTER_KEY)
    280a:	8c a5       	ldd	r24, Y+44	; 0x2c
    280c:	85 32       	cpi	r24, 0x25	; 37
    280e:	09 f0       	breq	.+2      	; 0x2812 <change_Password+0x282>
    2810:	76 c0       	rjmp	.+236    	; 0x28fe <change_Password+0x36e>
	{
		/* Receive a byte 1 or 0 to check that the two passwords are matched or not */
		control_received_data = UART_recieveByte();
    2812:	0e 94 3b 06 	call	0xc76	; 0xc76 <UART_recieveByte>
    2816:	80 93 4f 01 	sts	0x014F, r24
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	aa ef       	ldi	r26, 0xFA	; 250
    2820:	b3 e4       	ldi	r27, 0x43	; 67
    2822:	8b 87       	std	Y+11, r24	; 0x0b
    2824:	9c 87       	std	Y+12, r25	; 0x0c
    2826:	ad 87       	std	Y+13, r26	; 0x0d
    2828:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282a:	6b 85       	ldd	r22, Y+11	; 0x0b
    282c:	7c 85       	ldd	r23, Y+12	; 0x0c
    282e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2830:	9e 85       	ldd	r25, Y+14	; 0x0e
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	4a ef       	ldi	r20, 0xFA	; 250
    2838:	54 e4       	ldi	r21, 0x44	; 68
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	8f 83       	std	Y+7, r24	; 0x07
    2844:	98 87       	std	Y+8, r25	; 0x08
    2846:	a9 87       	std	Y+9, r26	; 0x09
    2848:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e8       	ldi	r20, 0x80	; 128
    2858:	5f e3       	ldi	r21, 0x3F	; 63
    285a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285e:	88 23       	and	r24, r24
    2860:	2c f4       	brge	.+10     	; 0x286c <change_Password+0x2dc>
		__ticks = 1;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
    286a:	3f c0       	rjmp	.+126    	; 0x28ea <change_Password+0x35a>
	else if (__tmp > 65535)
    286c:	6f 81       	ldd	r22, Y+7	; 0x07
    286e:	78 85       	ldd	r23, Y+8	; 0x08
    2870:	89 85       	ldd	r24, Y+9	; 0x09
    2872:	9a 85       	ldd	r25, Y+10	; 0x0a
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	3f ef       	ldi	r19, 0xFF	; 255
    2878:	4f e7       	ldi	r20, 0x7F	; 127
    287a:	57 e4       	ldi	r21, 0x47	; 71
    287c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2880:	18 16       	cp	r1, r24
    2882:	4c f5       	brge	.+82     	; 0x28d6 <change_Password+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2884:	6b 85       	ldd	r22, Y+11	; 0x0b
    2886:	7c 85       	ldd	r23, Y+12	; 0x0c
    2888:	8d 85       	ldd	r24, Y+13	; 0x0d
    288a:	9e 85       	ldd	r25, Y+14	; 0x0e
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e2       	ldi	r20, 0x20	; 32
    2892:	51 e4       	ldi	r21, 0x41	; 65
    2894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9e 83       	std	Y+6, r25	; 0x06
    28aa:	8d 83       	std	Y+5, r24	; 0x05
    28ac:	0f c0       	rjmp	.+30     	; 0x28cc <change_Password+0x33c>
    28ae:	88 ec       	ldi	r24, 0xC8	; 200
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9c 83       	std	Y+4, r25	; 0x04
    28b4:	8b 83       	std	Y+3, r24	; 0x03
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <change_Password+0x32a>
    28be:	9c 83       	std	Y+4, r25	; 0x04
    28c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	69 f7       	brne	.-38     	; 0x28ae <change_Password+0x31e>
    28d4:	14 c0       	rjmp	.+40     	; 0x28fe <change_Password+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d6:	6f 81       	ldd	r22, Y+7	; 0x07
    28d8:	78 85       	ldd	r23, Y+8	; 0x08
    28da:	89 85       	ldd	r24, Y+9	; 0x09
    28dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	8d 81       	ldd	r24, Y+5	; 0x05
    28ec:	9e 81       	ldd	r25, Y+6	; 0x06
    28ee:	9a 83       	std	Y+2, r25	; 0x02
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	9a 81       	ldd	r25, Y+2	; 0x02
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <change_Password+0x366>
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01
		/* to give the UART time to receive the byte */
		_delay_ms(500);
	}
}
    28fe:	ac 96       	adiw	r28, 0x2c	; 44
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <open_Door>:

/* Description:
 * displaying the status while opening the door.
 */
void open_Door(void)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	2e 97       	sbiw	r28, 0x0e	; 14
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
	/* Sending the & to let the CONTROL_ECU know that the user wants to use open the door */
	UART_sendByte('&');
    2924:	86 e2       	ldi	r24, 0x26	; 38
    2926:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>

	LCD_clearScreen();
    292a:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is");
    292e:	2c e7       	ldi	r18, 0x7C	; 124
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	a9 01       	movw	r20, r18
    2938:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Unlocking");
    293c:	24 e8       	ldi	r18, 0x84	; 132
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	60 e0       	ldi	r22, 0x00	; 0
    2944:	a9 01       	movw	r20, r18
    2946:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
	timer1_Delay(15);
    294a:	8f e0       	ldi	r24, 0x0F	; 15
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 4f 18 	call	0x309e	; 0x309e <timer1_Delay>

	LCD_clearScreen();
    2952:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "   WARNING!!! ");
    2956:	2e e8       	ldi	r18, 0x8E	; 142
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	a9 01       	movw	r20, r18
    2960:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e8       	ldi	r25, 0x80	; 128
    2968:	ab eb       	ldi	r26, 0xBB	; 187
    296a:	b4 e4       	ldi	r27, 0x44	; 68
    296c:	8b 87       	std	Y+11, r24	; 0x0b
    296e:	9c 87       	std	Y+12, r25	; 0x0c
    2970:	ad 87       	std	Y+13, r26	; 0x0d
    2972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a ef       	ldi	r20, 0xFA	; 250
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8f 83       	std	Y+7, r24	; 0x07
    298e:	98 87       	std	Y+8, r25	; 0x08
    2990:	a9 87       	std	Y+9, r26	; 0x09
    2992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <open_Door+0xa6>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <open_Door+0x124>
	else if (__tmp > 65535)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <open_Door+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <open_Door+0x106>
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <open_Door+0xf4>
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <open_Door+0xe8>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <open_Door+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <open_Door+0x130>
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);

	LCD_clearScreen();
    2a48:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
	/* warning to warn the user that the door will close in 3 seconds */
	LCD_displayStringRowColumn(0, 0, "Door is");
    2a4c:	2c e7       	ldi	r18, 0x7C	; 124
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	a9 01       	movw	r20, r18
    2a56:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Closing");
    2a5a:	2d e9       	ldi	r18, 0x9D	; 157
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	60 e0       	ldi	r22, 0x00	; 0
    2a62:	a9 01       	movw	r20, r18
    2a64:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
	timer1_Delay(3);
    2a68:	83 e0       	ldi	r24, 0x03	; 3
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 4f 18 	call	0x309e	; 0x309e <timer1_Delay>

	LCD_clearScreen();
    2a70:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Door is");
    2a74:	2c e7       	ldi	r18, 0x7C	; 124
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	a9 01       	movw	r20, r18
    2a7e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "Locking");
    2a82:	25 ea       	ldi	r18, 0xA5	; 165
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	a9 01       	movw	r20, r18
    2a8c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
	timer1_Delay(15);
    2a90:	8f e0       	ldi	r24, 0x0F	; 15
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	0e 94 4f 18 	call	0x309e	; 0x309e <timer1_Delay>
}
    2a98:	2e 96       	adiw	r28, 0x0e	; 14
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <buzzer_Alarm>:

/* Description:
 * it triggers the alarm when the password does not match the user's password for 3-consecutive times
 */
void buzzer_Alarm(void)
{
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
	/* Sending the $ to let the CONTROL_ECU know that the user wants to use open the door */
	UART_sendByte('$');
    2ab2:	84 e2       	ldi	r24, 0x24	; 36
    2ab4:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
	LCD_clearScreen();
    2ab8:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
	LCD_displayString("xxxx ERROR xxxx");
    2abc:	8d ea       	ldi	r24, 0xAD	; 173
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
	/* wait until the 1 minute */
	timer1_Delay(60);
    2ac4:	8c e3       	ldi	r24, 0x3C	; 60
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	0e 94 4f 18 	call	0x309e	; 0x309e <timer1_Delay>
}
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <system_Options>:

void system_Options(void)
{
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	eb 97       	sbiw	r28, 0x3b	; 59
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
	uint8 getKey;
	/* Display the main options on the screen */
	LCD_clearScreen();
    2ae6:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    2aea:	2d eb       	ldi	r18, 0xBD	; 189
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	a9 01       	movw	r20, r18
    2af4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    2af8:	2b ec       	ldi	r18, 0xCB	; 203
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	a9 01       	movw	r20, r18
    2b02:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>

	getKey = KEYPAD_getPressedKey();
    2b06:	0e 94 0e 10 	call	0x201c	; 0x201c <KEYPAD_getPressedKey>
    2b0a:	89 af       	std	Y+57, r24	; 0x39
	switch(getKey)
    2b0c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	3b af       	std	Y+59, r19	; 0x3b
    2b14:	2a af       	std	Y+58, r18	; 0x3a
    2b16:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b18:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b1a:	8b 32       	cpi	r24, 0x2B	; 43
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	39 f0       	breq	.+14     	; 0x2b2e <system_Options+0x5c>
    2b20:	2a ad       	ldd	r18, Y+58	; 0x3a
    2b22:	3b ad       	ldd	r19, Y+59	; 0x3b
    2b24:	2d 32       	cpi	r18, 0x2D	; 45
    2b26:	31 05       	cpc	r19, r1
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <system_Options+0x5a>
    2b2a:	44 c1       	rjmp	.+648    	; 0x2db4 <system_Options+0x2e2>
    2b2c:	af c2       	rjmp	.+1374   	; 0x308c <system_Options+0x5ba>
	{
	case '+':
		/* Enter the password to be able to open the door */
		LCD_clearScreen();
    2b2e:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
    2b32:	8b ed       	ldi	r24, 0xDB	; 219
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
		LCD_moveCursor(1,0);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
		/* sending # to CONTROL_ECU to be ready for reading the password and check it with the one saved before */
		UART_sendByte('#');
    2b42:	83 e2       	ldi	r24, 0x23	; 35
    2b44:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
		/* take the password from the user */
		input_Password();
    2b48:	0e 94 ad 11 	call	0x235a	; 0x235a <input_Password>

		if (control_received_data == PASSWORD_MATCH)
    2b4c:	80 91 4f 01 	lds	r24, 0x014F
    2b50:	81 30       	cpi	r24, 0x01	; 1
    2b52:	19 f4       	brne	.+6      	; 0x2b5a <system_Options+0x88>
		{
			/* Open the door */
			open_Door();
    2b54:	0e 94 88 14 	call	0x2910	; 0x2910 <open_Door>
    2b58:	99 c2       	rjmp	.+1330   	; 0x308c <system_Options+0x5ba>
		}
		/* If the two passwords don't match then repeat step 1 for the first time */
		else
		{
			LCD_clearScreen();
    2b5a:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayString("Incorrect Pass");
    2b5e:	8b ee       	ldi	r24, 0xEB	; 235
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"Pls Try Again");
    2b66:	2a ef       	ldi	r18, 0xFA	; 250
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	a9 01       	movw	r20, r18
    2b70:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	aa ef       	ldi	r26, 0xFA	; 250
    2b7a:	b4 e4       	ldi	r27, 0x44	; 68
    2b7c:	8d ab       	std	Y+53, r24	; 0x35
    2b7e:	9e ab       	std	Y+54, r25	; 0x36
    2b80:	af ab       	std	Y+55, r26	; 0x37
    2b82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6d a9       	ldd	r22, Y+53	; 0x35
    2b86:	7e a9       	ldd	r23, Y+54	; 0x36
    2b88:	8f a9       	ldd	r24, Y+55	; 0x37
    2b8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a ef       	ldi	r20, 0xFA	; 250
    2b92:	54 e4       	ldi	r21, 0x44	; 68
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	89 ab       	std	Y+49, r24	; 0x31
    2b9e:	9a ab       	std	Y+50, r25	; 0x32
    2ba0:	ab ab       	std	Y+51, r26	; 0x33
    2ba2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ba4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ba6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ba8:	8b a9       	ldd	r24, Y+51	; 0x33
    2baa:	9c a9       	ldd	r25, Y+52	; 0x34
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <system_Options+0xf4>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	98 ab       	std	Y+48, r25	; 0x30
    2bc2:	8f a7       	std	Y+47, r24	; 0x2f
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <system_Options+0x172>
	else if (__tmp > 65535)
    2bc6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bca:	8b a9       	ldd	r24, Y+51	; 0x33
    2bcc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <system_Options+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6d a9       	ldd	r22, Y+53	; 0x35
    2be0:	7e a9       	ldd	r23, Y+54	; 0x36
    2be2:	8f a9       	ldd	r24, Y+55	; 0x37
    2be4:	98 ad       	ldd	r25, Y+56	; 0x38
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	98 ab       	std	Y+48, r25	; 0x30
    2c04:	8f a7       	std	Y+47, r24	; 0x2f
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <system_Options+0x154>
    2c08:	88 ec       	ldi	r24, 0xC8	; 200
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9e a7       	std	Y+46, r25	; 0x2e
    2c0e:	8d a7       	std	Y+45, r24	; 0x2d
    2c10:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c12:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <system_Options+0x142>
    2c18:	9e a7       	std	Y+46, r25	; 0x2e
    2c1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	98 ab       	std	Y+48, r25	; 0x30
    2c24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c28:	98 a9       	ldd	r25, Y+48	; 0x30
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <system_Options+0x136>
    2c2e:	14 c0       	rjmp	.+40     	; 0x2c58 <system_Options+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	69 a9       	ldd	r22, Y+49	; 0x31
    2c32:	7a a9       	ldd	r23, Y+50	; 0x32
    2c34:	8b a9       	ldd	r24, Y+51	; 0x33
    2c36:	9c a9       	ldd	r25, Y+52	; 0x34
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	98 ab       	std	Y+48, r25	; 0x30
    2c42:	8f a7       	std	Y+47, r24	; 0x2f
    2c44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c46:	98 a9       	ldd	r25, Y+48	; 0x30
    2c48:	9c a7       	std	Y+44, r25	; 0x2c
    2c4a:	8b a7       	std	Y+43, r24	; 0x2b
    2c4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <system_Options+0x17e>
    2c54:	9c a7       	std	Y+44, r25	; 0x2c
    2c56:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);
			LCD_clearScreen();
    2c58:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayString("Plz Enter Pass:");
    2c5c:	8b ed       	ldi	r24, 0xDB	; 219
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
			LCD_moveCursor(1,0);
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
			/* Sending the # to let the CONTROL_ECU be ready for reading the password and check on it */
			UART_sendByte('#');
    2c6c:	83 e2       	ldi	r24, 0x23	; 35
    2c6e:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
			/* take the password from the user */
			input_Password();
    2c72:	0e 94 ad 11 	call	0x235a	; 0x235a <input_Password>

			if (control_received_data == PASSWORD_MATCH)
    2c76:	80 91 4f 01 	lds	r24, 0x014F
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	19 f4       	brne	.+6      	; 0x2c84 <system_Options+0x1b2>
			{
				/* Open the door */
				open_Door();
    2c7e:	0e 94 88 14 	call	0x2910	; 0x2910 <open_Door>
    2c82:	04 c2       	rjmp	.+1032   	; 0x308c <system_Options+0x5ba>
			}
			/* If the two passwords don't match then repeat step 1 for the second time */
			else
			{
				LCD_clearScreen();
    2c84:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
				LCD_displayString("Incorrect Pass");
    2c88:	8b ee       	ldi	r24, 0xEB	; 235
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
				LCD_displayStringRowColumn(1,0,"Pls Try Again");
    2c90:	2a ef       	ldi	r18, 0xFA	; 250
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	a9 01       	movw	r20, r18
    2c9a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	aa ef       	ldi	r26, 0xFA	; 250
    2ca4:	b4 e4       	ldi	r27, 0x44	; 68
    2ca6:	8f a3       	std	Y+39, r24	; 0x27
    2ca8:	98 a7       	std	Y+40, r25	; 0x28
    2caa:	a9 a7       	std	Y+41, r26	; 0x29
    2cac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cae:	6f a1       	ldd	r22, Y+39	; 0x27
    2cb0:	78 a5       	ldd	r23, Y+40	; 0x28
    2cb2:	89 a5       	ldd	r24, Y+41	; 0x29
    2cb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4a ef       	ldi	r20, 0xFA	; 250
    2cbc:	54 e4       	ldi	r21, 0x44	; 68
    2cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	8b a3       	std	Y+35, r24	; 0x23
    2cc8:	9c a3       	std	Y+36, r25	; 0x24
    2cca:	ad a3       	std	Y+37, r26	; 0x25
    2ccc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cce:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e8       	ldi	r20, 0x80	; 128
    2cdc:	5f e3       	ldi	r21, 0x3F	; 63
    2cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce2:	88 23       	and	r24, r24
    2ce4:	2c f4       	brge	.+10     	; 0x2cf0 <system_Options+0x21e>
		__ticks = 1;
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	9a a3       	std	Y+34, r25	; 0x22
    2cec:	89 a3       	std	Y+33, r24	; 0x21
    2cee:	3f c0       	rjmp	.+126    	; 0x2d6e <system_Options+0x29c>
	else if (__tmp > 65535)
    2cf0:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf2:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf4:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf6:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	3f ef       	ldi	r19, 0xFF	; 255
    2cfc:	4f e7       	ldi	r20, 0x7F	; 127
    2cfe:	57 e4       	ldi	r21, 0x47	; 71
    2d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d04:	18 16       	cp	r1, r24
    2d06:	4c f5       	brge	.+82     	; 0x2d5a <system_Options+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d08:	6f a1       	ldd	r22, Y+39	; 0x27
    2d0a:	78 a5       	ldd	r23, Y+40	; 0x28
    2d0c:	89 a5       	ldd	r24, Y+41	; 0x29
    2d0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	40 e2       	ldi	r20, 0x20	; 32
    2d16:	51 e4       	ldi	r21, 0x41	; 65
    2d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	9a a3       	std	Y+34, r25	; 0x22
    2d2e:	89 a3       	std	Y+33, r24	; 0x21
    2d30:	0f c0       	rjmp	.+30     	; 0x2d50 <system_Options+0x27e>
    2d32:	88 ec       	ldi	r24, 0xC8	; 200
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	98 a3       	std	Y+32, r25	; 0x20
    2d38:	8f 8f       	std	Y+31, r24	; 0x1f
    2d3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d3c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <system_Options+0x26c>
    2d42:	98 a3       	std	Y+32, r25	; 0x20
    2d44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d46:	89 a1       	ldd	r24, Y+33	; 0x21
    2d48:	9a a1       	ldd	r25, Y+34	; 0x22
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	9a a3       	std	Y+34, r25	; 0x22
    2d4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d50:	89 a1       	ldd	r24, Y+33	; 0x21
    2d52:	9a a1       	ldd	r25, Y+34	; 0x22
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	69 f7       	brne	.-38     	; 0x2d32 <system_Options+0x260>
    2d58:	14 c0       	rjmp	.+40     	; 0x2d82 <system_Options+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d60:	9e a1       	ldd	r25, Y+38	; 0x26
    2d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	9a a3       	std	Y+34, r25	; 0x22
    2d6c:	89 a3       	std	Y+33, r24	; 0x21
    2d6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d70:	9a a1       	ldd	r25, Y+34	; 0x22
    2d72:	9e 8f       	std	Y+30, r25	; 0x1e
    2d74:	8d 8f       	std	Y+29, r24	; 0x1d
    2d76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <system_Options+0x2a8>
    2d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d80:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2000);
				LCD_clearScreen();
    2d82:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    2d86:	8b ed       	ldi	r24, 0xDB	; 219
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
				LCD_moveCursor(1,0);
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	60 e0       	ldi	r22, 0x00	; 0
    2d92:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
				/* Sending the # to let the CONTROL_ECU be ready for reading the password and check on it */
				UART_sendByte('#');
    2d96:	83 e2       	ldi	r24, 0x23	; 35
    2d98:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
				/* take the password from the user */
				input_Password();
    2d9c:	0e 94 ad 11 	call	0x235a	; 0x235a <input_Password>

				if (control_received_data == PASSWORD_MATCH)
    2da0:	80 91 4f 01 	lds	r24, 0x014F
    2da4:	81 30       	cpi	r24, 0x01	; 1
    2da6:	19 f4       	brne	.+6      	; 0x2dae <system_Options+0x2dc>
				{
					/* Open the door */
					open_Door();
    2da8:	0e 94 88 14 	call	0x2910	; 0x2910 <open_Door>
    2dac:	6f c1       	rjmp	.+734    	; 0x308c <system_Options+0x5ba>
				}
				/* If the two passwords don't match for the last time then turn on the buzzer */
				else
				{
					/* Turn on the BUZZER */
					buzzer_Alarm();
    2dae:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <buzzer_Alarm>
    2db2:	6c c1       	rjmp	.+728    	; 0x308c <system_Options+0x5ba>
		}
		break;

	case '-':
		/* Enter the password to be able to change the password */
		LCD_clearScreen();
    2db4:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
    2db8:	8b ed       	ldi	r24, 0xDB	; 219
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
		LCD_moveCursor(1, 0);
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
		/* Sending the # to let the CONTROL_ECU be ready for reading the password and check on it */
		UART_sendByte('#');
    2dc8:	83 e2       	ldi	r24, 0x23	; 35
    2dca:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
		/* take the password from the user */
		input_Password();
    2dce:	0e 94 ad 11 	call	0x235a	; 0x235a <input_Password>
		if (control_received_data == PASSWORD_MATCH) /* Receive 1 for matched passwords */
    2dd2:	80 91 4f 01 	lds	r24, 0x014F
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	81 f4       	brne	.+32     	; 0x2dfa <system_Options+0x328>
		{
			LCD_clearScreen();
    2dda:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayString("Plz enter pass:");
    2dde:	88 e0       	ldi	r24, 0x08	; 8
    2de0:	91 e0       	ldi	r25, 0x01	; 1
    2de2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
			LCD_moveCursor(1, 0);
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
			/* Sending * to make the CONTROL_ECU ready for reading the password and save it */
			UART_sendByte('*');
    2dee:	8a e2       	ldi	r24, 0x2A	; 42
    2df0:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
			/* calling the function change_Password to give the password to the system and save it */
			change_Password();
    2df4:	0e 94 c8 12 	call	0x2590	; 0x2590 <change_Password>
    2df8:	49 c1       	rjmp	.+658    	; 0x308c <system_Options+0x5ba>
		}
		/* If the two passwords don't match then repeat step 1 for the first time */
		else
		{
			LCD_clearScreen();
    2dfa:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayString("Incorrect Pass");
    2dfe:	8b ee       	ldi	r24, 0xEB	; 235
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"Pls Try Again");
    2e06:	2a ef       	ldi	r18, 0xFA	; 250
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	60 e0       	ldi	r22, 0x00	; 0
    2e0e:	a9 01       	movw	r20, r18
    2e10:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	aa ef       	ldi	r26, 0xFA	; 250
    2e1a:	b4 e4       	ldi	r27, 0x44	; 68
    2e1c:	89 8f       	std	Y+25, r24	; 0x19
    2e1e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e20:	ab 8f       	std	Y+27, r26	; 0x1b
    2e22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e24:	69 8d       	ldd	r22, Y+25	; 0x19
    2e26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	4a ef       	ldi	r20, 0xFA	; 250
    2e32:	54 e4       	ldi	r21, 0x44	; 68
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	8d 8b       	std	Y+21, r24	; 0x15
    2e3e:	9e 8b       	std	Y+22, r25	; 0x16
    2e40:	af 8b       	std	Y+23, r26	; 0x17
    2e42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e44:	6d 89       	ldd	r22, Y+21	; 0x15
    2e46:	7e 89       	ldd	r23, Y+22	; 0x16
    2e48:	8f 89       	ldd	r24, Y+23	; 0x17
    2e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e8       	ldi	r20, 0x80	; 128
    2e52:	5f e3       	ldi	r21, 0x3F	; 63
    2e54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e58:	88 23       	and	r24, r24
    2e5a:	2c f4       	brge	.+10     	; 0x2e66 <system_Options+0x394>
		__ticks = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9c 8b       	std	Y+20, r25	; 0x14
    2e62:	8b 8b       	std	Y+19, r24	; 0x13
    2e64:	3f c0       	rjmp	.+126    	; 0x2ee4 <system_Options+0x412>
	else if (__tmp > 65535)
    2e66:	6d 89       	ldd	r22, Y+21	; 0x15
    2e68:	7e 89       	ldd	r23, Y+22	; 0x16
    2e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	3f ef       	ldi	r19, 0xFF	; 255
    2e72:	4f e7       	ldi	r20, 0x7F	; 127
    2e74:	57 e4       	ldi	r21, 0x47	; 71
    2e76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e7a:	18 16       	cp	r1, r24
    2e7c:	4c f5       	brge	.+82     	; 0x2ed0 <system_Options+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e2       	ldi	r20, 0x20	; 32
    2e8c:	51 e4       	ldi	r21, 0x41	; 65
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9c 8b       	std	Y+20, r25	; 0x14
    2ea4:	8b 8b       	std	Y+19, r24	; 0x13
    2ea6:	0f c0       	rjmp	.+30     	; 0x2ec6 <system_Options+0x3f4>
    2ea8:	88 ec       	ldi	r24, 0xC8	; 200
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	9a 8b       	std	Y+18, r25	; 0x12
    2eae:	89 8b       	std	Y+17, r24	; 0x11
    2eb0:	89 89       	ldd	r24, Y+17	; 0x11
    2eb2:	9a 89       	ldd	r25, Y+18	; 0x12
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <system_Options+0x3e2>
    2eb8:	9a 8b       	std	Y+18, r25	; 0x12
    2eba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	9c 8b       	std	Y+20, r25	; 0x14
    2ec4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	69 f7       	brne	.-38     	; 0x2ea8 <system_Options+0x3d6>
    2ece:	14 c0       	rjmp	.+40     	; 0x2ef8 <system_Options+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ed2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	9c 8b       	std	Y+20, r25	; 0x14
    2ee2:	8b 8b       	std	Y+19, r24	; 0x13
    2ee4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee8:	98 8b       	std	Y+16, r25	; 0x10
    2eea:	8f 87       	std	Y+15, r24	; 0x0f
    2eec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eee:	98 89       	ldd	r25, Y+16	; 0x10
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <system_Options+0x41e>
    2ef4:	98 8b       	std	Y+16, r25	; 0x10
    2ef6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			/* Enter the password to be able to change the password */
			LCD_clearScreen();
    2ef8:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayString("Plz Enter Pass:");
    2efc:	8b ed       	ldi	r24, 0xDB	; 219
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
			LCD_moveCursor(1, 0);
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	60 e0       	ldi	r22, 0x00	; 0
    2f08:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
			/* Sending the # to let the CONTROL_ECU be ready for reading the password and check on it */
			UART_sendByte('#');
    2f0c:	83 e2       	ldi	r24, 0x23	; 35
    2f0e:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
			/* take the password from the user */
			input_Password();
    2f12:	0e 94 ad 11 	call	0x235a	; 0x235a <input_Password>
			if (control_received_data == PASSWORD_MATCH) /* Receive 1 for matched passwords */
    2f16:	80 91 4f 01 	lds	r24, 0x014F
    2f1a:	81 30       	cpi	r24, 0x01	; 1
    2f1c:	81 f4       	brne	.+32     	; 0x2f3e <system_Options+0x46c>
			{
				LCD_clearScreen();
    2f1e:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
				LCD_displayString("Plz enter pass:");
    2f22:	88 e0       	ldi	r24, 0x08	; 8
    2f24:	91 e0       	ldi	r25, 0x01	; 1
    2f26:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
				LCD_moveCursor(1, 0);
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
				/* Sending * to make the CONTROL_ECU ready for reading the password and save it */
				UART_sendByte('*');
    2f32:	8a e2       	ldi	r24, 0x2A	; 42
    2f34:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
				/* calling the function change_Password to give the password to the system and save it */
				change_Password();
    2f38:	0e 94 c8 12 	call	0x2590	; 0x2590 <change_Password>
    2f3c:	a7 c0       	rjmp	.+334    	; 0x308c <system_Options+0x5ba>
			}
			/* If the two passwords don't match then repeat step 1 for the second time */
			else
			{
				LCD_clearScreen();
    2f3e:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
				LCD_displayString("Incorrect Pass");
    2f42:	8b ee       	ldi	r24, 0xEB	; 235
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
				LCD_displayStringRowColumn(1,0,"Pls Try Again");
    2f4a:	2a ef       	ldi	r18, 0xFA	; 250
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	60 e0       	ldi	r22, 0x00	; 0
    2f52:	a9 01       	movw	r20, r18
    2f54:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	aa ef       	ldi	r26, 0xFA	; 250
    2f5e:	b4 e4       	ldi	r27, 0x44	; 68
    2f60:	8b 87       	std	Y+11, r24	; 0x0b
    2f62:	9c 87       	std	Y+12, r25	; 0x0c
    2f64:	ad 87       	std	Y+13, r26	; 0x0d
    2f66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	4a ef       	ldi	r20, 0xFA	; 250
    2f76:	54 e4       	ldi	r21, 0x44	; 68
    2f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	8f 83       	std	Y+7, r24	; 0x07
    2f82:	98 87       	std	Y+8, r25	; 0x08
    2f84:	a9 87       	std	Y+9, r26	; 0x09
    2f86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f88:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8a:	78 85       	ldd	r23, Y+8	; 0x08
    2f8c:	89 85       	ldd	r24, Y+9	; 0x09
    2f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e8       	ldi	r20, 0x80	; 128
    2f96:	5f e3       	ldi	r21, 0x3F	; 63
    2f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f9c:	88 23       	and	r24, r24
    2f9e:	2c f4       	brge	.+10     	; 0x2faa <system_Options+0x4d8>
		__ticks = 1;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	9e 83       	std	Y+6, r25	; 0x06
    2fa6:	8d 83       	std	Y+5, r24	; 0x05
    2fa8:	3f c0       	rjmp	.+126    	; 0x3028 <system_Options+0x556>
	else if (__tmp > 65535)
    2faa:	6f 81       	ldd	r22, Y+7	; 0x07
    2fac:	78 85       	ldd	r23, Y+8	; 0x08
    2fae:	89 85       	ldd	r24, Y+9	; 0x09
    2fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	3f ef       	ldi	r19, 0xFF	; 255
    2fb6:	4f e7       	ldi	r20, 0x7F	; 127
    2fb8:	57 e4       	ldi	r21, 0x47	; 71
    2fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fbe:	18 16       	cp	r1, r24
    2fc0:	4c f5       	brge	.+82     	; 0x3014 <system_Options+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	40 e2       	ldi	r20, 0x20	; 32
    2fd0:	51 e4       	ldi	r21, 0x41	; 65
    2fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9e 83       	std	Y+6, r25	; 0x06
    2fe8:	8d 83       	std	Y+5, r24	; 0x05
    2fea:	0f c0       	rjmp	.+30     	; 0x300a <system_Options+0x538>
    2fec:	88 ec       	ldi	r24, 0xC8	; 200
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	9c 83       	std	Y+4, r25	; 0x04
    2ff2:	8b 83       	std	Y+3, r24	; 0x03
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <system_Options+0x526>
    2ffc:	9c 83       	std	Y+4, r25	; 0x04
    2ffe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3000:	8d 81       	ldd	r24, Y+5	; 0x05
    3002:	9e 81       	ldd	r25, Y+6	; 0x06
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	9e 83       	std	Y+6, r25	; 0x06
    3008:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300a:	8d 81       	ldd	r24, Y+5	; 0x05
    300c:	9e 81       	ldd	r25, Y+6	; 0x06
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	69 f7       	brne	.-38     	; 0x2fec <system_Options+0x51a>
    3012:	14 c0       	rjmp	.+40     	; 0x303c <system_Options+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3014:	6f 81       	ldd	r22, Y+7	; 0x07
    3016:	78 85       	ldd	r23, Y+8	; 0x08
    3018:	89 85       	ldd	r24, Y+9	; 0x09
    301a:	9a 85       	ldd	r25, Y+10	; 0x0a
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	9e 83       	std	Y+6, r25	; 0x06
    3026:	8d 83       	std	Y+5, r24	; 0x05
    3028:	8d 81       	ldd	r24, Y+5	; 0x05
    302a:	9e 81       	ldd	r25, Y+6	; 0x06
    302c:	9a 83       	std	Y+2, r25	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	9a 81       	ldd	r25, Y+2	; 0x02
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <system_Options+0x562>
    3038:	9a 83       	std	Y+2, r25	; 0x02
    303a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);
				/* Enter the password to be able to change the password */
				LCD_clearScreen();
    303c:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    3040:	8b ed       	ldi	r24, 0xDB	; 219
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
				LCD_moveCursor(1, 0);
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	60 e0       	ldi	r22, 0x00	; 0
    304c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
				/* Sending the # to let the CONTROL_ECU be ready for reading the password and check on it */
				UART_sendByte('#');
    3050:	83 e2       	ldi	r24, 0x23	; 35
    3052:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
				/* take the password from the user */
				input_Password();
    3056:	0e 94 ad 11 	call	0x235a	; 0x235a <input_Password>
				/* Sending the letter R to notify CONTROL_ECU that the user wants to change the password */
				UART_sendByte('R');
    305a:	82 e5       	ldi	r24, 0x52	; 82
    305c:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
				if (control_received_data == PASSWORD_MATCH) /* Receive 1 for matched passwords */
    3060:	80 91 4f 01 	lds	r24, 0x014F
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	81 f4       	brne	.+32     	; 0x3088 <system_Options+0x5b6>
				{
					LCD_clearScreen();
    3068:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
					LCD_displayString("Plz enter pass:");
    306c:	88 e0       	ldi	r24, 0x08	; 8
    306e:	91 e0       	ldi	r25, 0x01	; 1
    3070:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
					LCD_moveCursor(1, 0);
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	60 e0       	ldi	r22, 0x00	; 0
    3078:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
					/* Sending * to make the CONTROL_ECU ready for reading the password and save it */
					UART_sendByte('*');
    307c:	8a e2       	ldi	r24, 0x2A	; 42
    307e:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
					/* calling the function change_Password to give the password to the system and save it */
					change_Password();
    3082:	0e 94 c8 12 	call	0x2590	; 0x2590 <change_Password>
    3086:	02 c0       	rjmp	.+4      	; 0x308c <system_Options+0x5ba>
				}
				/* If the two passwords don't match for the last time then turn on the buzzer */
				else
				{
					/* Turn on the BUZZER */
					buzzer_Alarm();
    3088:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <buzzer_Alarm>
				}
			}
		}
		break;
	}
}
    308c:	eb 96       	adiw	r28, 0x3b	; 59
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	de bf       	out	0x3e, r29	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	cd bf       	out	0x3d, r28	; 61
    3098:	cf 91       	pop	r28
    309a:	df 91       	pop	r29
    309c:	08 95       	ret

0000309e <timer1_Delay>:

/* Description:
 * it makes a delay in seconds by the use of timer1
 */
void timer1_Delay(uint8 sec)
{
    309e:	df 93       	push	r29
    30a0:	cf 93       	push	r28
    30a2:	0f 92       	push	r0
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62
    30a8:	89 83       	std	Y+1, r24	; 0x01
    /* Timer1 initialization */
    TIMER1_init(&TIMER1_settings_1);
    30aa:	85 e4       	ldi	r24, 0x45	; 69
    30ac:	91 e0       	ldi	r25, 0x01	; 1
    30ae:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <TIMER1_init>

	/* Setting the TIMER1_callBack to be the callback function */
	TIMER1_setCallBack(Timer1_callBack);
    30b2:	81 ea       	ldi	r24, 0xA1	; 161
    30b4:	91 e1       	ldi	r25, 0x11	; 17
    30b6:	0e 94 93 07 	call	0xf26	; 0xf26 <TIMER1_setCallBack>

	/* reset the timer counter to start counting from 0 */
	g_tickTime = 0;
    30ba:	10 92 4e 01 	sts	0x014E, r1

	/* wait until the input seconds */
	while (g_tickTime <= sec);
    30be:	90 91 4e 01 	lds	r25, 0x014E
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	89 17       	cp	r24, r25
    30c6:	d8 f7       	brcc	.-10     	; 0x30be <timer1_Delay+0x20>

	TIMER1_deInit();
    30c8:	0e 94 6c 07 	call	0xed8	; 0xed8 <TIMER1_deInit>

	/* reset the timer counter again to get the needed seconds */
	g_tickTime = 0;
    30cc:	10 92 4e 01 	sts	0x014E, r1
}
    30d0:	0f 90       	pop	r0
    30d2:	cf 91       	pop	r28
    30d4:	df 91       	pop	r29
    30d6:	08 95       	ret

000030d8 <main>:
/*******************************************************************************
*                              Main Code                                       *
*******************************************************************************/
int main(void)
{
    30d8:	df 93       	push	r29
    30da:	cf 93       	push	r28
    30dc:	cd b7       	in	r28, 0x3d	; 61
    30de:	de b7       	in	r29, 0x3e	; 62
    /* enabling interrupt bit "I-bit" */
    SREG |= (1<<7);
    30e0:	af e5       	ldi	r26, 0x5F	; 95
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	ef e5       	ldi	r30, 0x5F	; 95
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	80 68       	ori	r24, 0x80	; 128
    30ec:	8c 93       	st	X, r24

    /* UART initialization */
    UART_init(&UART_settings_mc1);
    30ee:	8e e3       	ldi	r24, 0x3E	; 62
    30f0:	91 e0       	ldi	r25, 0x01	; 1
    30f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

    /* Timer1 initialization */
    TIMER1_init(&TIMER1_settings_1);
    30f6:	85 e4       	ldi	r24, 0x45	; 69
    30f8:	91 e0       	ldi	r25, 0x01	; 1
    30fa:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <TIMER1_init>

	/* Setting the TIMER1_callBack to be the callback function */
	TIMER1_setCallBack(Timer1_callBack);
    30fe:	81 ea       	ldi	r24, 0xA1	; 161
    3100:	91 e1       	ldi	r25, 0x11	; 17
    3102:	0e 94 93 07 	call	0xf26	; 0xf26 <TIMER1_setCallBack>

	/* LCD initialization */
	LCD_init();
    3106:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <LCD_init>

	LCD_displayString("Plz Enter Pass:");
    310a:	8b ed       	ldi	r24, 0xDB	; 219
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
	LCD_moveCursor(1, 0);
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	60 e0       	ldi	r22, 0x00	; 0
    3116:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
	/* Sending * to make the CONTROL_ECU ready for reading the password and save it */
	UART_sendByte('*');
    311a:	8a e2       	ldi	r24, 0x2A	; 42
    311c:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
	/* Step.1 : calling the function CHANGE_PASSWORD to give the password to the system and save it */
	change_Password();
    3120:	0e 94 c8 12 	call	0x2590	; 0x2590 <change_Password>
	/* if the two passwords are matched  we will receive 1 */
	if (control_received_data == PASSWORD_MATCH)
    3124:	80 91 4f 01 	lds	r24, 0x014F
    3128:	81 30       	cpi	r24, 0x01	; 1
    312a:	09 f4       	brne	.+2      	; 0x312e <main+0x56>
    312c:	54 c0       	rjmp	.+168    	; 0x31d6 <main+0xfe>
		/* Go to step 2 */
	}
	/* if the two passwords don't match repeat step 1 for 2nd time  */
	else
	{
		LCD_clearScreen();
    312e:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
		LCD_displayString("Incorrect Pass");
    3132:	8b ee       	ldi	r24, 0xEB	; 235
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"Pls Try Again");
    313a:	2a ef       	ldi	r18, 0xFA	; 250
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	a9 01       	movw	r20, r18
    3144:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
		timer1_Delay(2);
    3148:	82 e0       	ldi	r24, 0x02	; 2
    314a:	0e 94 4f 18 	call	0x309e	; 0x309e <timer1_Delay>
		LCD_clearScreen();
    314e:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
    3152:	8b ed       	ldi	r24, 0xDB	; 219
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
		LCD_moveCursor(1, 0);
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	60 e0       	ldi	r22, 0x00	; 0
    315e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
		UART_sendByte('*');
    3162:	8a e2       	ldi	r24, 0x2A	; 42
    3164:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
		change_Password();
    3168:	0e 94 c8 12 	call	0x2590	; 0x2590 <change_Password>
		if (control_received_data == PASSWORD_MATCH)
    316c:	80 91 4f 01 	lds	r24, 0x014F
    3170:	81 30       	cpi	r24, 0x01	; 1
    3172:	89 f1       	breq	.+98     	; 0x31d6 <main+0xfe>
			/* Go to step 2 */
		}
		/* if the two passwords don't match repeat step 1 for last time  */
		else
		{
			LCD_clearScreen();
    3174:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayString("Incorrect Pass");
    3178:	8b ee       	ldi	r24, 0xEB	; 235
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"Plz Try Again");
    3180:	28 e1       	ldi	r18, 0x18	; 24
    3182:	31 e0       	ldi	r19, 0x01	; 1
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	a9 01       	movw	r20, r18
    318a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <LCD_displayStringRowColumn>
			timer1_Delay(2);
    318e:	82 e0       	ldi	r24, 0x02	; 2
    3190:	0e 94 4f 18 	call	0x309e	; 0x309e <timer1_Delay>
			LCD_clearScreen();
    3194:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
			LCD_displayString("Plz Enter Pass:");
    3198:	8b ed       	ldi	r24, 0xDB	; 219
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
			LCD_moveCursor(1, 0);
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	60 e0       	ldi	r22, 0x00	; 0
    31a4:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <LCD_moveCursor>
			UART_sendByte('*');
    31a8:	8a e2       	ldi	r24, 0x2A	; 42
    31aa:	0e 94 24 06 	call	0xc48	; 0xc48 <UART_sendByte>
			change_Password();
    31ae:	0e 94 c8 12 	call	0x2590	; 0x2590 <change_Password>
			if (control_received_data == PASSWORD_MATCH)
    31b2:	80 91 4f 01 	lds	r24, 0x014F
    31b6:	81 30       	cpi	r24, 0x01	; 1
    31b8:	71 f0       	breq	.+28     	; 0x31d6 <main+0xfe>
				/* Go to step 2 */
			}
			/* if the two passwords don't match again, DISPLAY an ERROR and close the system */
			else
			{
				LCD_clearScreen();
    31ba:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_clearScreen>
				LCD_displayString("  SYSTEM ERROR ");
    31be:	86 e2       	ldi	r24, 0x26	; 38
    31c0:	91 e0       	ldi	r25, 0x01	; 1
    31c2:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LCD_displayString>
				timer1_Delay(2);
    31c6:	82 e0       	ldi	r24, 0x02	; 2
    31c8:	0e 94 4f 18 	call	0x309e	; 0x309e <timer1_Delay>
				return 0;
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0

	for(;;)
	{
		system_Options();
	}
}
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret
		}
	}

	for(;;)
	{
		system_Options();
    31d6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <system_Options>
    31da:	fd cf       	rjmp	.-6      	; 0x31d6 <main+0xfe>

000031dc <__udivmodsi4>:
    31dc:	a1 e2       	ldi	r26, 0x21	; 33
    31de:	1a 2e       	mov	r1, r26
    31e0:	aa 1b       	sub	r26, r26
    31e2:	bb 1b       	sub	r27, r27
    31e4:	fd 01       	movw	r30, r26
    31e6:	0d c0       	rjmp	.+26     	; 0x3202 <__udivmodsi4_ep>

000031e8 <__udivmodsi4_loop>:
    31e8:	aa 1f       	adc	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	ee 1f       	adc	r30, r30
    31ee:	ff 1f       	adc	r31, r31
    31f0:	a2 17       	cp	r26, r18
    31f2:	b3 07       	cpc	r27, r19
    31f4:	e4 07       	cpc	r30, r20
    31f6:	f5 07       	cpc	r31, r21
    31f8:	20 f0       	brcs	.+8      	; 0x3202 <__udivmodsi4_ep>
    31fa:	a2 1b       	sub	r26, r18
    31fc:	b3 0b       	sbc	r27, r19
    31fe:	e4 0b       	sbc	r30, r20
    3200:	f5 0b       	sbc	r31, r21

00003202 <__udivmodsi4_ep>:
    3202:	66 1f       	adc	r22, r22
    3204:	77 1f       	adc	r23, r23
    3206:	88 1f       	adc	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	1a 94       	dec	r1
    320c:	69 f7       	brne	.-38     	; 0x31e8 <__udivmodsi4_loop>
    320e:	60 95       	com	r22
    3210:	70 95       	com	r23
    3212:	80 95       	com	r24
    3214:	90 95       	com	r25
    3216:	9b 01       	movw	r18, r22
    3218:	ac 01       	movw	r20, r24
    321a:	bd 01       	movw	r22, r26
    321c:	cf 01       	movw	r24, r30
    321e:	08 95       	ret

00003220 <__prologue_saves__>:
    3220:	2f 92       	push	r2
    3222:	3f 92       	push	r3
    3224:	4f 92       	push	r4
    3226:	5f 92       	push	r5
    3228:	6f 92       	push	r6
    322a:	7f 92       	push	r7
    322c:	8f 92       	push	r8
    322e:	9f 92       	push	r9
    3230:	af 92       	push	r10
    3232:	bf 92       	push	r11
    3234:	cf 92       	push	r12
    3236:	df 92       	push	r13
    3238:	ef 92       	push	r14
    323a:	ff 92       	push	r15
    323c:	0f 93       	push	r16
    323e:	1f 93       	push	r17
    3240:	cf 93       	push	r28
    3242:	df 93       	push	r29
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	ca 1b       	sub	r28, r26
    324a:	db 0b       	sbc	r29, r27
    324c:	0f b6       	in	r0, 0x3f	; 63
    324e:	f8 94       	cli
    3250:	de bf       	out	0x3e, r29	; 62
    3252:	0f be       	out	0x3f, r0	; 63
    3254:	cd bf       	out	0x3d, r28	; 61
    3256:	09 94       	ijmp

00003258 <__epilogue_restores__>:
    3258:	2a 88       	ldd	r2, Y+18	; 0x12
    325a:	39 88       	ldd	r3, Y+17	; 0x11
    325c:	48 88       	ldd	r4, Y+16	; 0x10
    325e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3260:	6e 84       	ldd	r6, Y+14	; 0x0e
    3262:	7d 84       	ldd	r7, Y+13	; 0x0d
    3264:	8c 84       	ldd	r8, Y+12	; 0x0c
    3266:	9b 84       	ldd	r9, Y+11	; 0x0b
    3268:	aa 84       	ldd	r10, Y+10	; 0x0a
    326a:	b9 84       	ldd	r11, Y+9	; 0x09
    326c:	c8 84       	ldd	r12, Y+8	; 0x08
    326e:	df 80       	ldd	r13, Y+7	; 0x07
    3270:	ee 80       	ldd	r14, Y+6	; 0x06
    3272:	fd 80       	ldd	r15, Y+5	; 0x05
    3274:	0c 81       	ldd	r16, Y+4	; 0x04
    3276:	1b 81       	ldd	r17, Y+3	; 0x03
    3278:	aa 81       	ldd	r26, Y+2	; 0x02
    327a:	b9 81       	ldd	r27, Y+1	; 0x01
    327c:	ce 0f       	add	r28, r30
    327e:	d1 1d       	adc	r29, r1
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	ed 01       	movw	r28, r26
    328c:	08 95       	ret

0000328e <itoa>:
    328e:	fb 01       	movw	r30, r22
    3290:	9f 01       	movw	r18, r30
    3292:	e8 94       	clt
    3294:	42 30       	cpi	r20, 0x02	; 2
    3296:	c4 f0       	brlt	.+48     	; 0x32c8 <itoa+0x3a>
    3298:	45 32       	cpi	r20, 0x25	; 37
    329a:	b4 f4       	brge	.+44     	; 0x32c8 <itoa+0x3a>
    329c:	4a 30       	cpi	r20, 0x0A	; 10
    329e:	29 f4       	brne	.+10     	; 0x32aa <itoa+0x1c>
    32a0:	97 fb       	bst	r25, 7
    32a2:	1e f4       	brtc	.+6      	; 0x32aa <itoa+0x1c>
    32a4:	90 95       	com	r25
    32a6:	81 95       	neg	r24
    32a8:	9f 4f       	sbci	r25, 0xFF	; 255
    32aa:	64 2f       	mov	r22, r20
    32ac:	77 27       	eor	r23, r23
    32ae:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__udivmodhi4>
    32b2:	80 5d       	subi	r24, 0xD0	; 208
    32b4:	8a 33       	cpi	r24, 0x3A	; 58
    32b6:	0c f0       	brlt	.+2      	; 0x32ba <itoa+0x2c>
    32b8:	89 5d       	subi	r24, 0xD9	; 217
    32ba:	81 93       	st	Z+, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	a1 f7       	brne	.-24     	; 0x32aa <itoa+0x1c>
    32c2:	16 f4       	brtc	.+4      	; 0x32c8 <itoa+0x3a>
    32c4:	5d e2       	ldi	r21, 0x2D	; 45
    32c6:	51 93       	st	Z+, r21
    32c8:	10 82       	st	Z, r1
    32ca:	c9 01       	movw	r24, r18
    32cc:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <strrev>

000032d0 <strrev>:
    32d0:	dc 01       	movw	r26, r24
    32d2:	fc 01       	movw	r30, r24
    32d4:	67 2f       	mov	r22, r23
    32d6:	71 91       	ld	r23, Z+
    32d8:	77 23       	and	r23, r23
    32da:	e1 f7       	brne	.-8      	; 0x32d4 <strrev+0x4>
    32dc:	32 97       	sbiw	r30, 0x02	; 2
    32de:	04 c0       	rjmp	.+8      	; 0x32e8 <strrev+0x18>
    32e0:	7c 91       	ld	r23, X
    32e2:	6d 93       	st	X+, r22
    32e4:	70 83       	st	Z, r23
    32e6:	62 91       	ld	r22, -Z
    32e8:	ae 17       	cp	r26, r30
    32ea:	bf 07       	cpc	r27, r31
    32ec:	c8 f3       	brcs	.-14     	; 0x32e0 <strrev+0x10>
    32ee:	08 95       	ret

000032f0 <__udivmodhi4>:
    32f0:	aa 1b       	sub	r26, r26
    32f2:	bb 1b       	sub	r27, r27
    32f4:	51 e1       	ldi	r21, 0x11	; 17
    32f6:	07 c0       	rjmp	.+14     	; 0x3306 <__udivmodhi4_ep>

000032f8 <__udivmodhi4_loop>:
    32f8:	aa 1f       	adc	r26, r26
    32fa:	bb 1f       	adc	r27, r27
    32fc:	a6 17       	cp	r26, r22
    32fe:	b7 07       	cpc	r27, r23
    3300:	10 f0       	brcs	.+4      	; 0x3306 <__udivmodhi4_ep>
    3302:	a6 1b       	sub	r26, r22
    3304:	b7 0b       	sbc	r27, r23

00003306 <__udivmodhi4_ep>:
    3306:	88 1f       	adc	r24, r24
    3308:	99 1f       	adc	r25, r25
    330a:	5a 95       	dec	r21
    330c:	a9 f7       	brne	.-22     	; 0x32f8 <__udivmodhi4_loop>
    330e:	80 95       	com	r24
    3310:	90 95       	com	r25
    3312:	bc 01       	movw	r22, r24
    3314:	cd 01       	movw	r24, r26
    3316:	08 95       	ret

00003318 <_exit>:
    3318:	f8 94       	cli

0000331a <__stop_program>:
    331a:	ff cf       	rjmp	.-2      	; 0x331a <__stop_program>
